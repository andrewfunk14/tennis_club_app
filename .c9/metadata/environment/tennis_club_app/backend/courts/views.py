{"filter":false,"title":"views.py","tooltip":"/tennis_club_app/backend/courts/views.py","undoManager":{"mark":65,"position":65,"stack":[[{"start":{"row":0,"column":0},"end":{"row":3,"column":0},"action":"remove","lines":["from django.shortcuts import render","","# Create your views here.",""],"id":2},{"start":{"row":0,"column":0},"end":{"row":6,"column":0},"action":"insert","lines":["from django.views import View","from django.http import HttpResponse","","class CourtBookingView(View):","    def get(self, request):","        return HttpResponse(\"This is the court booking view.\")",""]}],[{"start":{"row":0,"column":0},"end":{"row":6,"column":0},"action":"remove","lines":["from django.views import View","from django.http import HttpResponse","","class CourtBookingView(View):","    def get(self, request):","        return HttpResponse(\"This is the court booking view.\")",""],"id":3},{"start":{"row":0,"column":0},"end":{"row":4,"column":0},"action":"insert","lines":["from django.http import HttpResponse","","def court_booking_view(request):","    return HttpResponse(\"This is the court booking view.\")",""]}],[{"start":{"row":0,"column":0},"end":{"row":4,"column":0},"action":"remove","lines":["from django.http import HttpResponse","","def court_booking_view(request):","    return HttpResponse(\"This is the court booking view.\")",""],"id":4},{"start":{"row":0,"column":0},"end":{"row":7,"column":0},"action":"insert","lines":["from django.http import HttpResponse","","def court_booking_view(request):","    return HttpResponse(\"This is the court booking view.\")","","def court_list_view(request):","    return HttpResponse(\"This is the list of available courts.\")",""]}],[{"start":{"row":7,"column":0},"end":{"row":8,"column":0},"action":"insert","lines":["",""],"id":5}],[{"start":{"row":8,"column":0},"end":{"row":12,"column":0},"action":"insert","lines":["from django.http import HttpResponse","","def court_home_view(request):","    return HttpResponse(\"Welcome to the Court Management Section. Go to /book/ or /list/ for more options.\")",""],"id":6}],[{"start":{"row":8,"column":0},"end":{"row":9,"column":0},"action":"remove","lines":["from django.http import HttpResponse",""],"id":7},{"start":{"row":7,"column":0},"end":{"row":8,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":0,"column":0},"end":{"row":10,"column":0},"action":"remove","lines":["from django.http import HttpResponse","","def court_booking_view(request):","    return HttpResponse(\"This is the court booking view.\")","","def court_list_view(request):","    return HttpResponse(\"This is the list of available courts.\")","","def court_home_view(request):","    return HttpResponse(\"Welcome to the Court Management Section. Go to /book/ or /list/ for more options.\")",""],"id":8},{"start":{"row":0,"column":0},"end":{"row":18,"column":0},"action":"insert","lines":["from django.http import HttpResponse","from django.template import loader","","# Sample data representing court schedules","SAMPLE_SCHEDULE = [","    {\"court\": 1, \"time\": \"8:00 AM - 10:00 AM\", \"status\": \"Booked\"},","    {\"court\": 2, \"time\": \"10:00 AM - 12:00 PM\", \"status\": \"Available\"},","    {\"court\": 3, \"time\": \"12:00 PM - 2:00 PM\", \"status\": \"Booked\"},","    {\"court\": 4, \"time\": \"2:00 PM - 4:00 PM\", \"status\": \"Available\"},","]","","def court_list_view(request):","    # Load the template and pass the sample schedule to it","    template = loader.get_template('court_schedule.html')","    context = {","        'schedule': SAMPLE_SCHEDULE","    }","    return HttpResponse(template.render(context, request))",""]}],[{"start":{"row":18,"column":0},"end":{"row":19,"column":0},"action":"insert","lines":["",""],"id":9}],[{"start":{"row":19,"column":0},"end":{"row":23,"column":0},"action":"insert","lines":["from django.shortcuts import render","","def landing_page_view(request):","    return render(request, 'landing_page.html')",""],"id":10}],[{"start":{"row":23,"column":0},"end":{"row":24,"column":0},"action":"insert","lines":["",""],"id":11},{"start":{"row":24,"column":0},"end":{"row":24,"column":1},"action":"insert","lines":["\\"]}],[{"start":{"row":10,"column":0},"end":{"row":11,"column":0},"action":"insert","lines":["",""],"id":12},{"start":{"row":11,"column":0},"end":{"row":12,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":11,"column":0},"end":{"row":16,"column":0},"action":"insert","lines":["from django.contrib.auth.decorators import login_required","","@login_required","def court_list_view(request):","    # Your code here",""],"id":13}],[{"start":{"row":15,"column":2},"end":{"row":18,"column":29},"action":"remove","lines":["  # Your code here","","","def court_list_view(request):"],"id":14},{"start":{"row":15,"column":1},"end":{"row":15,"column":2},"action":"remove","lines":[" "]},{"start":{"row":15,"column":0},"end":{"row":15,"column":1},"action":"remove","lines":[" "]},{"start":{"row":14,"column":29},"end":{"row":15,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":27,"column":0},"end":{"row":27,"column":1},"action":"remove","lines":["\\"],"id":15}],[{"start":{"row":0,"column":0},"end":{"row":27,"column":0},"action":"remove","lines":["from django.http import HttpResponse","from django.template import loader","","# Sample data representing court schedules","SAMPLE_SCHEDULE = [","    {\"court\": 1, \"time\": \"8:00 AM - 10:00 AM\", \"status\": \"Booked\"},","    {\"court\": 2, \"time\": \"10:00 AM - 12:00 PM\", \"status\": \"Available\"},","    {\"court\": 3, \"time\": \"12:00 PM - 2:00 PM\", \"status\": \"Booked\"},","    {\"court\": 4, \"time\": \"2:00 PM - 4:00 PM\", \"status\": \"Available\"},","]","","from django.contrib.auth.decorators import login_required","","@login_required","def court_list_view(request):","    # Load the template and pass the sample schedule to it","    template = loader.get_template('court_schedule.html')","    context = {","        'schedule': SAMPLE_SCHEDULE","    }","    return HttpResponse(template.render(context, request))","","from django.shortcuts import render","","def landing_page_view(request):","    return render(request, 'landing_page.html')","",""],"id":18},{"start":{"row":0,"column":0},"end":{"row":33,"column":0},"action":"insert","lines":["from django.http import HttpResponse, JsonResponse","from django.template import loader","from django.contrib.auth.decorators import login_required","","# Sample data representing court schedules in a format that FullCalendar expects","SAMPLE_SCHEDULE = [","    {\"court\": 1, \"start\": \"2024-09-11T08:00:00\", \"end\": \"2024-09-11T10:00:00\", \"status\": \"Booked\"},","    {\"court\": 2, \"start\": \"2024-09-11T10:00:00\", \"end\": \"2024-09-11T12:00:00\", \"status\": \"Available\"},","    {\"court\": 3, \"start\": \"2024-09-11T12:00:00\", \"end\": \"2024-09-11T14:00:00\", \"status\": \"Booked\"},","    {\"court\": 4, \"start\": \"2024-09-11T14:00:00\", \"end\": \"2024-09-11T16:00:00\", \"status\": \"Available\"},","]","","# This view renders the court schedule page (which includes FullCalendar)","@login_required","def court_list_view(request):","    template = loader.get_template('court_schedule.html')","    return HttpResponse(template.render({}, request))","","# This view provides the JSON data for FullCalendar to display the court schedule","def court_schedule(request):","    events = []","    for event in SAMPLE_SCHEDULE:","        events.append({","            'title': f'Court {event[\"court\"]} - {event[\"status\"]}',","            'start': event['start'],","            'end': event['end'],","        })","    ","    return JsonResponse(events, safe=False)","","# Landing page view","def landing_page_view(request):","    return render(request, 'landing_page.html')",""]}],[{"start":{"row":0,"column":0},"end":{"row":33,"column":0},"action":"remove","lines":["from django.http import HttpResponse, JsonResponse","from django.template import loader","from django.contrib.auth.decorators import login_required","","# Sample data representing court schedules in a format that FullCalendar expects","SAMPLE_SCHEDULE = [","    {\"court\": 1, \"start\": \"2024-09-11T08:00:00\", \"end\": \"2024-09-11T10:00:00\", \"status\": \"Booked\"},","    {\"court\": 2, \"start\": \"2024-09-11T10:00:00\", \"end\": \"2024-09-11T12:00:00\", \"status\": \"Available\"},","    {\"court\": 3, \"start\": \"2024-09-11T12:00:00\", \"end\": \"2024-09-11T14:00:00\", \"status\": \"Booked\"},","    {\"court\": 4, \"start\": \"2024-09-11T14:00:00\", \"end\": \"2024-09-11T16:00:00\", \"status\": \"Available\"},","]","","# This view renders the court schedule page (which includes FullCalendar)","@login_required","def court_list_view(request):","    template = loader.get_template('court_schedule.html')","    return HttpResponse(template.render({}, request))","","# This view provides the JSON data for FullCalendar to display the court schedule","def court_schedule(request):","    events = []","    for event in SAMPLE_SCHEDULE:","        events.append({","            'title': f'Court {event[\"court\"]} - {event[\"status\"]}',","            'start': event['start'],","            'end': event['end'],","        })","    ","    return JsonResponse(events, safe=False)","","# Landing page view","def landing_page_view(request):","    return render(request, 'landing_page.html')",""],"id":19},{"start":{"row":0,"column":0},"end":{"row":42,"column":0},"action":"insert","lines":["from django.http import JsonResponse","from django.template import loader","from django.contrib.auth.decorators import login_required","","# Sample data representing court schedules","SAMPLE_SCHEDULE = [","    {\"court\": 1, \"start\": \"2024-09-11T08:00:00\", \"end\": \"2024-09-11T10:00:00\", \"status\": \"Booked\"},","    {\"court\": 2, \"start\": \"2024-09-11T10:00:00\", \"end\": \"2024-09-11T12:00:00\", \"status\": \"Available\"},","    {\"court\": 3, \"start\": \"2024-09-11T12:00:00\", \"end\": \"2024-09-11T14:00:00\", \"status\": \"Booked\"},","    {\"court\": 4, \"start\": \"2024-09-11T14:00:00\", \"end\": \"2024-09-11T16:00:00\", \"status\": \"Available\"},","]","","@login_required","def court_list_view(request):","    template = loader.get_template('court_schedule.html')","    return HttpResponse(template.render({}, request))","","def court_schedule(request):","    events = []","    for event in SAMPLE_SCHEDULE:","        events.append({","            'title': f'Court {event[\"court\"]} - {event[\"status\"]}',","            'start': event['start'],","            'end': event['end'],","        })","    return JsonResponse(events, safe=False)","","def court_availability(request):","    selected_date = request.GET.get('date')","    courts_on_date = [event for event in SAMPLE_SCHEDULE if event['start'].startswith(selected_date)]","    ","    courts_list = []","    for court in courts_on_date:","        courts_list.append({","            'court': court['court'],","            'status': court['status'],","        })","","    return JsonResponse(courts_list, safe=False)","","def landing_page_view(request):","    return render(request, 'landing_page.html')",""]}],[{"start":{"row":0,"column":0},"end":{"row":42,"column":0},"action":"remove","lines":["from django.http import JsonResponse","from django.template import loader","from django.contrib.auth.decorators import login_required","","# Sample data representing court schedules","SAMPLE_SCHEDULE = [","    {\"court\": 1, \"start\": \"2024-09-11T08:00:00\", \"end\": \"2024-09-11T10:00:00\", \"status\": \"Booked\"},","    {\"court\": 2, \"start\": \"2024-09-11T10:00:00\", \"end\": \"2024-09-11T12:00:00\", \"status\": \"Available\"},","    {\"court\": 3, \"start\": \"2024-09-11T12:00:00\", \"end\": \"2024-09-11T14:00:00\", \"status\": \"Booked\"},","    {\"court\": 4, \"start\": \"2024-09-11T14:00:00\", \"end\": \"2024-09-11T16:00:00\", \"status\": \"Available\"},","]","","@login_required","def court_list_view(request):","    template = loader.get_template('court_schedule.html')","    return HttpResponse(template.render({}, request))","","def court_schedule(request):","    events = []","    for event in SAMPLE_SCHEDULE:","        events.append({","            'title': f'Court {event[\"court\"]} - {event[\"status\"]}',","            'start': event['start'],","            'end': event['end'],","        })","    return JsonResponse(events, safe=False)","","def court_availability(request):","    selected_date = request.GET.get('date')","    courts_on_date = [event for event in SAMPLE_SCHEDULE if event['start'].startswith(selected_date)]","    ","    courts_list = []","    for court in courts_on_date:","        courts_list.append({","            'court': court['court'],","            'status': court['status'],","        })","","    return JsonResponse(courts_list, safe=False)","","def landing_page_view(request):","    return render(request, 'landing_page.html')",""],"id":20},{"start":{"row":0,"column":0},"end":{"row":47,"column":0},"action":"insert","lines":["from django.http import HttpResponse, JsonResponse  # Import HttpResponse and JsonResponse","from django.template import loader","from django.contrib.auth.decorators import login_required","","# Sample data representing court schedules in a format that FullCalendar expects","SAMPLE_SCHEDULE = [","    {\"court\": 1, \"start\": \"2024-09-11T08:00:00\", \"end\": \"2024-09-11T10:00:00\", \"status\": \"Booked\"},","    {\"court\": 2, \"start\": \"2024-09-11T10:00:00\", \"end\": \"2024-09-11T12:00:00\", \"status\": \"Available\"},","    {\"court\": 3, \"start\": \"2024-09-11T12:00:00\", \"end\": \"2024-09-11T14:00:00\", \"status\": \"Booked\"},","    {\"court\": 4, \"start\": \"2024-09-11T14:00:00\", \"end\": \"2024-09-11T16:00:00\", \"status\": \"Available\"},","]","","# View to render the court schedule page (which includes FullCalendar)","@login_required","def court_list_view(request):","    template = loader.get_template('court_schedule.html')","    return HttpResponse(template.render({}, request))","","# View to return court schedule data in JSON format for FullCalendar","def court_schedule(request):","    events = []","    for event in SAMPLE_SCHEDULE:","        events.append({","            'title': f'Court {event[\"court\"]} - {event[\"status\"]}',","            'start': event['start'],","            'end': event['end'],","        })","    ","    return JsonResponse(events, safe=False)","","# View to return court availability based on the selected date","def court_availability(request):","    selected_date = request.GET.get('date')","    courts_on_date = [event for event in SAMPLE_SCHEDULE if event['start'].startswith(selected_date)]","    ","    courts_list = []","    for court in courts_on_date:","        courts_list.append({","            'court': court['court'],","            'status': court['status'],","        })","","    return JsonResponse(courts_list, safe=False)","","# Landing page view","def landing_page_view(request):","    return render(request, 'landing_page.html')",""]}],[{"start":{"row":16,"column":53},"end":{"row":17,"column":0},"action":"insert","lines":["",""],"id":21},{"start":{"row":17,"column":0},"end":{"row":17,"column":4},"action":"insert","lines":["    "]},{"start":{"row":17,"column":4},"end":{"row":17,"column":5},"action":"insert","lines":["\\"]}],[{"start":{"row":17,"column":4},"end":{"row":17,"column":5},"action":"remove","lines":["\\"],"id":22},{"start":{"row":17,"column":0},"end":{"row":17,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":17,"column":0},"end":{"row":18,"column":0},"action":"insert","lines":["",""],"id":23}],[{"start":{"row":18,"column":0},"end":{"row":27,"column":0},"action":"insert","lines":["def court_schedule(request):","    events = []","    for event in SAMPLE_SCHEDULE:","        events.append({","            'title': f'Court {event[\"court\"]} - {event[\"status\"]}',","            'start': event['start'],","            'end': event['end'],","        })","    return JsonResponse(events, safe=False)",""],"id":24}],[{"start":{"row":18,"column":0},"end":{"row":27,"column":0},"action":"remove","lines":["def court_schedule(request):","    events = []","    for event in SAMPLE_SCHEDULE:","        events.append({","            'title': f'Court {event[\"court\"]} - {event[\"status\"]}',","            'start': event['start'],","            'end': event['end'],","        })","    return JsonResponse(events, safe=False)",""],"id":25},{"start":{"row":17,"column":0},"end":{"row":18,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":0,"column":0},"end":{"row":48,"column":0},"action":"remove","lines":["from django.http import HttpResponse, JsonResponse  # Import HttpResponse and JsonResponse","from django.template import loader","from django.contrib.auth.decorators import login_required","","# Sample data representing court schedules in a format that FullCalendar expects","SAMPLE_SCHEDULE = [","    {\"court\": 1, \"start\": \"2024-09-11T08:00:00\", \"end\": \"2024-09-11T10:00:00\", \"status\": \"Booked\"},","    {\"court\": 2, \"start\": \"2024-09-11T10:00:00\", \"end\": \"2024-09-11T12:00:00\", \"status\": \"Available\"},","    {\"court\": 3, \"start\": \"2024-09-11T12:00:00\", \"end\": \"2024-09-11T14:00:00\", \"status\": \"Booked\"},","    {\"court\": 4, \"start\": \"2024-09-11T14:00:00\", \"end\": \"2024-09-11T16:00:00\", \"status\": \"Available\"},","]","","# View to render the court schedule page (which includes FullCalendar)","@login_required","def court_list_view(request):","    template = loader.get_template('court_schedule.html')","    return HttpResponse(template.render({}, request))","","","# View to return court schedule data in JSON format for FullCalendar","def court_schedule(request):","    events = []","    for event in SAMPLE_SCHEDULE:","        events.append({","            'title': f'Court {event[\"court\"]} - {event[\"status\"]}',","            'start': event['start'],","            'end': event['end'],","        })","    ","    return JsonResponse(events, safe=False)","","# View to return court availability based on the selected date","def court_availability(request):","    selected_date = request.GET.get('date')","    courts_on_date = [event for event in SAMPLE_SCHEDULE if event['start'].startswith(selected_date)]","    ","    courts_list = []","    for court in courts_on_date:","        courts_list.append({","            'court': court['court'],","            'status': court['status'],","        })","","    return JsonResponse(courts_list, safe=False)","","# Landing page view","def landing_page_view(request):","    return render(request, 'landing_page.html')",""],"id":26},{"start":{"row":0,"column":0},"end":{"row":4,"column":0},"action":"insert","lines":["from django.shortcuts import render","","def court_schedule_view(request):","    return render(request, 'court_schedule.html')",""]}],[{"start":{"row":0,"column":0},"end":{"row":4,"column":0},"action":"remove","lines":["from django.shortcuts import render","","def court_schedule_view(request):","    return render(request, 'court_schedule.html')",""],"id":28},{"start":{"row":0,"column":0},"end":{"row":5,"column":0},"action":"insert","lines":["from django.shortcuts import render","","def court_schedule_view(request):","    hours_range = range(1, 13)  # 1 to 12 for AM/PM","    return render(request, 'court_schedule.html', {'hours_range': hours_range})",""]}],[{"start":{"row":5,"column":0},"end":{"row":6,"column":0},"action":"insert","lines":["",""],"id":29}],[{"start":{"row":6,"column":0},"end":{"row":25,"column":0},"action":"insert","lines":["from django.http import JsonResponse","","# Sample event data to test with FullCalendar","def court_schedule_events(request):","    events = [","        {","            'id': 1,","            'title': 'Court 1 Booking',","            'start': '2024-09-12T10:00:00',","            'end': '2024-09-12T12:00:00'","        },","        {","            'id': 2,","            'title': 'Court 2 Booking',","            'start': '2024-09-14T14:00:00',","            'end': '2024-09-14T16:00:00'","        }","    ]","    return JsonResponse(events, safe=False)",""],"id":30}],[{"start":{"row":25,"column":0},"end":{"row":26,"column":0},"action":"insert","lines":["",""],"id":31}],[{"start":{"row":26,"column":0},"end":{"row":35,"column":0},"action":"insert","lines":["from django.http import JsonResponse","","def add_event(request):","    if request.method == 'POST':","        # You would process the data and save the new event here.","        # For now, just return a success response.","        return JsonResponse({'status': 'success'}, status=200)","    else:","        return JsonResponse({'error': 'Invalid request method'}, status=400)",""],"id":32}],[{"start":{"row":35,"column":0},"end":{"row":41,"column":0},"action":"insert","lines":["def edit_event(request, event_id):","    if request.method == 'POST':","        # You would process the data and update the event here.","        return JsonResponse({'status': 'success'}, status=200)","    else:","        return JsonResponse({'error': 'Invalid request method'}, status=400)",""],"id":33}],[{"start":{"row":41,"column":0},"end":{"row":47,"column":0},"action":"insert","lines":["def delete_event(request, event_id):","    if request.method == 'POST':","        # You would delete the event here.","        return JsonResponse({'status': 'success'}, status=200)","    else:","        return JsonResponse({'error': 'Invalid request method'}, status=400)",""],"id":34}],[{"start":{"row":35,"column":0},"end":{"row":36,"column":0},"action":"insert","lines":["",""],"id":35}],[{"start":{"row":42,"column":0},"end":{"row":43,"column":0},"action":"insert","lines":["",""],"id":36}],[{"start":{"row":0,"column":0},"end":{"row":49,"column":0},"action":"remove","lines":["from django.shortcuts import render","","def court_schedule_view(request):","    hours_range = range(1, 13)  # 1 to 12 for AM/PM","    return render(request, 'court_schedule.html', {'hours_range': hours_range})","","from django.http import JsonResponse","","# Sample event data to test with FullCalendar","def court_schedule_events(request):","    events = [","        {","            'id': 1,","            'title': 'Court 1 Booking',","            'start': '2024-09-12T10:00:00',","            'end': '2024-09-12T12:00:00'","        },","        {","            'id': 2,","            'title': 'Court 2 Booking',","            'start': '2024-09-14T14:00:00',","            'end': '2024-09-14T16:00:00'","        }","    ]","    return JsonResponse(events, safe=False)","","from django.http import JsonResponse","","def add_event(request):","    if request.method == 'POST':","        # You would process the data and save the new event here.","        # For now, just return a success response.","        return JsonResponse({'status': 'success'}, status=200)","    else:","        return JsonResponse({'error': 'Invalid request method'}, status=400)","","def edit_event(request, event_id):","    if request.method == 'POST':","        # You would process the data and update the event here.","        return JsonResponse({'status': 'success'}, status=200)","    else:","        return JsonResponse({'error': 'Invalid request method'}, status=400)","","def delete_event(request, event_id):","    if request.method == 'POST':","        # You would delete the event here.","        return JsonResponse({'status': 'success'}, status=200)","    else:","        return JsonResponse({'error': 'Invalid request method'}, status=400)",""],"id":37},{"start":{"row":0,"column":0},"end":{"row":78,"column":0},"action":"insert","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","from .models import CourtBooking, Court","from django.utils.dateparse import parse_datetime","import json","","# View to render the court schedule page","def court_schedule_view(request):","    hours_range = range(1, 13)  # 1 to 12 for AM/PM","    return render(request, 'court_schedule.html', {'hours_range': hours_range})","","# Fetch events (court bookings) in JSON format for FullCalendar","def court_schedule_events(request):","    bookings = CourtBooking.objects.all()","    events = []","    for booking in bookings:","        events.append({","            'id': booking.id,","            'title': booking.title,","            'start': booking.start_time.isoformat(),","            'end': booking.end_time.isoformat(),","            'court': booking.court.name,","        })","    return JsonResponse(events, safe=False)","","# Add new event (court booking)","@csrf_exempt  # Exempt from CSRF for testing; ensure proper CSRF handling in production","def add_event(request):","    if request.method == 'POST':","        data = json.loads(request.body)","        try:","            court = Court.objects.get(id=data.get('court_id'))","            title = data.get('title')","            start_time = parse_datetime(data.get('start'))","            end_time = parse_datetime(data.get('end'))","","            if start_time and end_time and court:","                booking = CourtBooking.objects.create(","                    court=court,","                    title=title,","                    start_time=start_time,","                    end_time=end_time","                )","                return JsonResponse({'status': 'success', 'event_id': booking.id}, status=200)","            else:","                return JsonResponse({'error': 'Invalid data'}, status=400)","        except Court.DoesNotExist:","            return JsonResponse({'error': 'Court not found'}, status=404)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","# Edit existing event (court booking)","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        data = json.loads(request.body)","        booking = get_object_or_404(CourtBooking, id=event_id)","        try:","            booking.title = data.get('title', booking.title)","            booking.start_time = parse_datetime(data.get('start', booking.start_time.isoformat()))","            booking.end_time = parse_datetime(data.get('end', booking.end_time.isoformat()))","            booking.save()","            return JsonResponse({'status': 'success'}, status=200)","        except Exception as e:","            return JsonResponse({'error': str(e)}, status=400)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","# Delete an event (court booking)","@csrf_exempt","def delete_event(request, event_id):","    if request.method == 'POST':","        try:","            booking = get_object_or_404(CourtBooking, id=event_id)","            booking.delete()","            return JsonResponse({'status': 'success'}, status=200)","        except CourtBooking.DoesNotExist:","            return JsonResponse({'error': 'Booking not found'}, status=404)","    return JsonResponse({'error': 'Invalid request method'}, status=400)",""]}],[{"start":{"row":26,"column":0},"end":{"row":66,"column":0},"action":"remove","lines":["# Add new event (court booking)","@csrf_exempt  # Exempt from CSRF for testing; ensure proper CSRF handling in production","def add_event(request):","    if request.method == 'POST':","        data = json.loads(request.body)","        try:","            court = Court.objects.get(id=data.get('court_id'))","            title = data.get('title')","            start_time = parse_datetime(data.get('start'))","            end_time = parse_datetime(data.get('end'))","","            if start_time and end_time and court:","                booking = CourtBooking.objects.create(","                    court=court,","                    title=title,","                    start_time=start_time,","                    end_time=end_time","                )","                return JsonResponse({'status': 'success', 'event_id': booking.id}, status=200)","            else:","                return JsonResponse({'error': 'Invalid data'}, status=400)","        except Court.DoesNotExist:","            return JsonResponse({'error': 'Court not found'}, status=404)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","# Edit existing event (court booking)","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        data = json.loads(request.body)","        booking = get_object_or_404(CourtBooking, id=event_id)","        try:","            booking.title = data.get('title', booking.title)","            booking.start_time = parse_datetime(data.get('start', booking.start_time.isoformat()))","            booking.end_time = parse_datetime(data.get('end', booking.end_time.isoformat()))","            booking.save()","            return JsonResponse({'status': 'success'}, status=200)","        except Exception as e:","            return JsonResponse({'error': str(e)}, status=400)","    return JsonResponse({'error': 'Invalid request method'}, status=400)",""],"id":38},{"start":{"row":26,"column":0},"end":{"row":67,"column":0},"action":"insert","lines":["import json","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","from .models import Court","from django.utils.dateparse import parse_datetime","","@csrf_exempt  # Exempt from CSRF for testing; ensure proper CSRF handling in production","def add_event(request):","    if request.method == 'POST':","        try:","            # Check if the request body contains valid JSON","            if not request.body:","                return JsonResponse({'error': 'Empty request body'}, status=400)","            ","            data = json.loads(request.body)","","            # Validate the necessary data is present","            court = Court.objects.get(id=data.get('court_id'))","            title = data.get('title')","            start_time = parse_datetime(data.get('start'))","            end_time = parse_datetime(data.get('end'))","","            # Ensure all necessary data is available","            if start_time and end_time and court and title:","                booking = CourtBooking.objects.create(","                    court=court,","                    title=title,","                    start_time=start_time,","                    end_time=end_time","                )","                return JsonResponse({'status': 'success', 'event_id': booking.id}, status=200)","            else:","                return JsonResponse({'error': 'Invalid data'}, status=400)","","        except Court.DoesNotExist:","            return JsonResponse({'error': 'Court not found'}, status=404)","","        except json.JSONDecodeError:","            return JsonResponse({'error': 'Invalid JSON data'}, status=400)","","    return JsonResponse({'error': 'Invalid request method'}, status=400)",""]}],[{"start":{"row":26,"column":0},"end":{"row":30,"column":49},"action":"remove","lines":["import json","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","from .models import Court","from django.utils.dateparse import parse_datetime"],"id":39},{"start":{"row":25,"column":0},"end":{"row":26,"column":0},"action":"remove","lines":["",""]},{"start":{"row":24,"column":43},"end":{"row":25,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":61,"column":0},"end":{"row":62,"column":0},"action":"insert","lines":["",""],"id":40},{"start":{"row":62,"column":0},"end":{"row":63,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":62,"column":0},"end":{"row":78,"column":0},"action":"insert","lines":["@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            booking = get_object_or_404(CourtBooking, id=event_id)","            ","            booking.title = data.get('title', booking.title)","            booking.start_time = parse_datetime(data.get('start', booking.start_time.isoformat()))","            booking.end_time = parse_datetime(data.get('end', booking.end_time.isoformat()))","            booking.save()","","            return JsonResponse({'status': 'success'}, status=200)","        except Exception as e:","            return JsonResponse({'error': str(e)}, status=400)","    return JsonResponse({'error': 'Invalid request method'}, status=400)",""],"id":41}],[{"start":{"row":0,"column":0},"end":{"row":91,"column":0},"action":"remove","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","from .models import CourtBooking, Court","from django.utils.dateparse import parse_datetime","import json","","# View to render the court schedule page","def court_schedule_view(request):","    hours_range = range(1, 13)  # 1 to 12 for AM/PM","    return render(request, 'court_schedule.html', {'hours_range': hours_range})","","# Fetch events (court bookings) in JSON format for FullCalendar","def court_schedule_events(request):","    bookings = CourtBooking.objects.all()","    events = []","    for booking in bookings:","        events.append({","            'id': booking.id,","            'title': booking.title,","            'start': booking.start_time.isoformat(),","            'end': booking.end_time.isoformat(),","            'court': booking.court.name,","        })","    return JsonResponse(events, safe=False)","","@csrf_exempt  # Exempt from CSRF for testing; ensure proper CSRF handling in production","def add_event(request):","    if request.method == 'POST':","        try:","            # Check if the request body contains valid JSON","            if not request.body:","                return JsonResponse({'error': 'Empty request body'}, status=400)","            ","            data = json.loads(request.body)","","            # Validate the necessary data is present","            court = Court.objects.get(id=data.get('court_id'))","            title = data.get('title')","            start_time = parse_datetime(data.get('start'))","            end_time = parse_datetime(data.get('end'))","","            # Ensure all necessary data is available","            if start_time and end_time and court and title:","                booking = CourtBooking.objects.create(","                    court=court,","                    title=title,","                    start_time=start_time,","                    end_time=end_time","                )","                return JsonResponse({'status': 'success', 'event_id': booking.id}, status=200)","            else:","                return JsonResponse({'error': 'Invalid data'}, status=400)","","        except Court.DoesNotExist:","            return JsonResponse({'error': 'Court not found'}, status=404)","","        except json.JSONDecodeError:","            return JsonResponse({'error': 'Invalid JSON data'}, status=400)","","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            booking = get_object_or_404(CourtBooking, id=event_id)","            ","            booking.title = data.get('title', booking.title)","            booking.start_time = parse_datetime(data.get('start', booking.start_time.isoformat()))","            booking.end_time = parse_datetime(data.get('end', booking.end_time.isoformat()))","            booking.save()","","            return JsonResponse({'status': 'success'}, status=200)","        except Exception as e:","            return JsonResponse({'error': str(e)}, status=400)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","","# Delete an event (court booking)","@csrf_exempt","def delete_event(request, event_id):","    if request.method == 'POST':","        try:","            booking = get_object_or_404(CourtBooking, id=event_id)","            booking.delete()","            return JsonResponse({'status': 'success'}, status=200)","        except CourtBooking.DoesNotExist:","            return JsonResponse({'error': 'Booking not found'}, status=404)","    return JsonResponse({'error': 'Invalid request method'}, status=400)",""],"id":42},{"start":{"row":0,"column":0},"end":{"row":93,"column":0},"action":"insert","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","from .models import CourtBooking, Court","from django.utils.dateparse import parse_datetime","import json","","# View to render the court schedule page","def court_schedule_view(request):","    hours_range = range(1, 13)  # 1 to 12 for AM/PM","    return render(request, 'court_schedule.html', {'hours_range': hours_range})","","# Fetch events (court bookings) in JSON format for FullCalendar","def court_schedule_events(request):","    bookings = CourtBooking.objects.all()","    events = []","    for booking in bookings:","        events.append({","            'id': booking.id,","            'title': booking.title,","            'start': booking.start_time.isoformat(),","            'end': booking.end_time.isoformat(),","            'court': booking.court.name,","        })","    return JsonResponse(events, safe=False)","","@csrf_exempt","def add_event(request):","    if request.method == 'POST':","        try:","            # Check if the request body contains valid JSON","            if not request.body:","                return JsonResponse({'error': 'Empty request body'}, status=400)","            ","            data = json.loads(request.body)","","            # Validate the necessary data is present","            court_id = data.get('court_id')","            title = data.get('title')","            start_time = parse_datetime(data.get('start'))","            end_time = parse_datetime(data.get('end'))","","            # Ensure all necessary data is available","            if start_time and end_time and title and court_id:","                try:","                    court = Court.objects.get(id=court_id)","                except Court.DoesNotExist:","                    return JsonResponse({'error': 'Court not found'}, status=404)","","                booking = CourtBooking.objects.create(","                    court=court,","                    title=title,","                    start_time=start_time,","                    end_time=end_time","                )","                return JsonResponse({'status': 'success', 'event_id': booking.id}, status=200)","            else:","                return JsonResponse({'error': 'Invalid data'}, status=400)","","        except json.JSONDecodeError:","            return JsonResponse({'error': 'Invalid JSON data'}, status=400)","","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            booking = get_object_or_404(CourtBooking, id=event_id)","","            booking.title = data.get('title', booking.title)","            booking.start_time = parse_datetime(data.get('start', booking.start_time.isoformat()))","            booking.end_time = parse_datetime(data.get('end', booking.end_time.isoformat()))","            booking.save()","","            return JsonResponse({'status': 'success'}, status=200)","        except json.JSONDecodeError:","            return JsonResponse({'error': 'Invalid JSON data'}, status=400)","        except Exception as e:","            return JsonResponse({'error': str(e)}, status=400)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def delete_event(request, event_id):","    if request.method == 'POST':","        try:","            booking = get_object_or_404(CourtBooking, id=event_id)","            booking.delete()","            return JsonResponse({'status': 'success'}, status=200)","        except CourtBooking.DoesNotExist:","            return JsonResponse({'error': 'Booking not found'}, status=404)","    return JsonResponse({'error': 'Invalid request method'}, status=400)",""]}],[{"start":{"row":0,"column":0},"end":{"row":93,"column":0},"action":"remove","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","from .models import CourtBooking, Court","from django.utils.dateparse import parse_datetime","import json","","# View to render the court schedule page","def court_schedule_view(request):","    hours_range = range(1, 13)  # 1 to 12 for AM/PM","    return render(request, 'court_schedule.html', {'hours_range': hours_range})","","# Fetch events (court bookings) in JSON format for FullCalendar","def court_schedule_events(request):","    bookings = CourtBooking.objects.all()","    events = []","    for booking in bookings:","        events.append({","            'id': booking.id,","            'title': booking.title,","            'start': booking.start_time.isoformat(),","            'end': booking.end_time.isoformat(),","            'court': booking.court.name,","        })","    return JsonResponse(events, safe=False)","","@csrf_exempt","def add_event(request):","    if request.method == 'POST':","        try:","            # Check if the request body contains valid JSON","            if not request.body:","                return JsonResponse({'error': 'Empty request body'}, status=400)","            ","            data = json.loads(request.body)","","            # Validate the necessary data is present","            court_id = data.get('court_id')","            title = data.get('title')","            start_time = parse_datetime(data.get('start'))","            end_time = parse_datetime(data.get('end'))","","            # Ensure all necessary data is available","            if start_time and end_time and title and court_id:","                try:","                    court = Court.objects.get(id=court_id)","                except Court.DoesNotExist:","                    return JsonResponse({'error': 'Court not found'}, status=404)","","                booking = CourtBooking.objects.create(","                    court=court,","                    title=title,","                    start_time=start_time,","                    end_time=end_time","                )","                return JsonResponse({'status': 'success', 'event_id': booking.id}, status=200)","            else:","                return JsonResponse({'error': 'Invalid data'}, status=400)","","        except json.JSONDecodeError:","            return JsonResponse({'error': 'Invalid JSON data'}, status=400)","","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            booking = get_object_or_404(CourtBooking, id=event_id)","","            booking.title = data.get('title', booking.title)","            booking.start_time = parse_datetime(data.get('start', booking.start_time.isoformat()))","            booking.end_time = parse_datetime(data.get('end', booking.end_time.isoformat()))","            booking.save()","","            return JsonResponse({'status': 'success'}, status=200)","        except json.JSONDecodeError:","            return JsonResponse({'error': 'Invalid JSON data'}, status=400)","        except Exception as e:","            return JsonResponse({'error': str(e)}, status=400)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def delete_event(request, event_id):","    if request.method == 'POST':","        try:","            booking = get_object_or_404(CourtBooking, id=event_id)","            booking.delete()","            return JsonResponse({'status': 'success'}, status=200)","        except CourtBooking.DoesNotExist:","            return JsonResponse({'error': 'Booking not found'}, status=404)","    return JsonResponse({'error': 'Invalid request method'}, status=400)",""],"id":43},{"start":{"row":0,"column":0},"end":{"row":74,"column":0},"action":"insert","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","from .models import Event","from django.utils.dateparse import parse_datetime","import json","","# View to render the event schedule page","def event_schedule_view(request):","    return render(request, 'event_schedule.html')","","# Fetch events in JSON format for FullCalendar","def event_schedule_events(request):","    events = Event.objects.all()","    event_list = []","    for event in events:","        event_list.append({","            'id': event.id,","            'title': event.title,","            'start': event.start_time.isoformat(),","            'end': event.end_time.isoformat(),","        })","    return JsonResponse(event_list, safe=False)","","@csrf_exempt  # Exempt for testing; ensure proper CSRF handling in production","def add_event(request):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            title = data.get('title')","            start_time = parse_datetime(data.get('start'))","            end_time = parse_datetime(data.get('end'))","","            if title and start_time and end_time:","                event = Event.objects.create(","                    title=title,","                    start_time=start_time,","                    end_time=end_time","                )","                return JsonResponse({'status': 'success', 'event_id': event.id}, status=200)","            else:","                return JsonResponse({'error': 'Invalid data'}, status=400)","","        except json.JSONDecodeError:","            return JsonResponse({'error': 'Invalid JSON data'}, status=400)","","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            event = get_object_or_404(Event, id=event_id)","            ","            event.title = data.get('title', event.title)","            event.start_time = parse_datetime(data.get('start', event.start_time.isoformat()))","            event.end_time = parse_datetime(data.get('end', event.end_time.isoformat()))","            event.save()","","            return JsonResponse({'status': 'success'}, status=200)","        except Exception as e:","            return JsonResponse({'error': str(e)}, status=400)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def delete_event(request, event_id):","    if request.method == 'POST':","        try:","            event = get_object_or_404(Event, id=event_id)","            event.delete()","            return JsonResponse({'status': 'success'}, status=200)","        except Event.DoesNotExist:","         ",""]}],[{"start":{"row":0,"column":0},"end":{"row":74,"column":0},"action":"remove","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","from .models import Event","from django.utils.dateparse import parse_datetime","import json","","# View to render the event schedule page","def event_schedule_view(request):","    return render(request, 'event_schedule.html')","","# Fetch events in JSON format for FullCalendar","def event_schedule_events(request):","    events = Event.objects.all()","    event_list = []","    for event in events:","        event_list.append({","            'id': event.id,","            'title': event.title,","            'start': event.start_time.isoformat(),","            'end': event.end_time.isoformat(),","        })","    return JsonResponse(event_list, safe=False)","","@csrf_exempt  # Exempt for testing; ensure proper CSRF handling in production","def add_event(request):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            title = data.get('title')","            start_time = parse_datetime(data.get('start'))","            end_time = parse_datetime(data.get('end'))","","            if title and start_time and end_time:","                event = Event.objects.create(","                    title=title,","                    start_time=start_time,","                    end_time=end_time","                )","                return JsonResponse({'status': 'success', 'event_id': event.id}, status=200)","            else:","                return JsonResponse({'error': 'Invalid data'}, status=400)","","        except json.JSONDecodeError:","            return JsonResponse({'error': 'Invalid JSON data'}, status=400)","","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            event = get_object_or_404(Event, id=event_id)","            ","            event.title = data.get('title', event.title)","            event.start_time = parse_datetime(data.get('start', event.start_time.isoformat()))","            event.end_time = parse_datetime(data.get('end', event.end_time.isoformat()))","            event.save()","","            return JsonResponse({'status': 'success'}, status=200)","        except Exception as e:","            return JsonResponse({'error': str(e)}, status=400)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def delete_event(request, event_id):","    if request.method == 'POST':","        try:","            event = get_object_or_404(Event, id=event_id)","            event.delete()","            return JsonResponse({'status': 'success'}, status=200)","        except Event.DoesNotExist:","         ",""],"id":44},{"start":{"row":0,"column":0},"end":{"row":75,"column":0},"action":"insert","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","from .models import Event","from django.utils.dateparse import parse_datetime","import json","","# View to render the event schedule page","def event_schedule_view(request):","    return render(request, 'event_schedule.html')","","# Fetch events in JSON format for FullCalendar","def event_schedule_events(request):","    events = Event.objects.all()","    event_list = []","    for event in events:","        event_list.append({","            'id': event.id,","            'title': event.title,","            'start': event.start_time.isoformat(),","            'end': event.end_time.isoformat(),","        })","    return JsonResponse(event_list, safe=False)","","@csrf_exempt  # Exempt for testing; ensure proper CSRF handling in production","def add_event(request):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            title = data.get('title')","            start_time = parse_datetime(data.get('start'))","            end_time = parse_datetime(data.get('end'))","","            if title and start_time and end_time:","                event = Event.objects.create(","                    title=title,","                    start_time=start_time,","                    end_time=end_time","                )","                return JsonResponse({'status': 'success', 'event_id': event.id}, status=200)","            else:","                return JsonResponse({'error': 'Invalid data'}, status=400)","","        except json.JSONDecodeError:","            return JsonResponse({'error': 'Invalid JSON data'}, status=400)","","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            event = get_object_or_404(Event, id=event_id)","            ","            event.title = data.get('title', event.title)","            event.start_time = parse_datetime(data.get('start', event.start_time.isoformat()))","            event.end_time = parse_datetime(data.get('end', event.end_time.isoformat()))","            event.save()","","            return JsonResponse({'status': 'success'}, status=200)","        except Exception as e:","            return JsonResponse({'error': str(e)}, status=400)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def delete_event(request, event_id):","    if request.method == 'POST':","        try:","            event = get_object_or_404(Event, id=event_id)","            event.delete()","            return JsonResponse({'status': 'success'}, status=200)","        except Event.DoesNotExist:","            return JsonResponse({'error': 'Event not found'}, status=404)","    return JsonResponse({'error': 'Invalid request method'}, status=400)",""]}],[{"start":{"row":0,"column":0},"end":{"row":75,"column":0},"action":"remove","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","from .models import Event","from django.utils.dateparse import parse_datetime","import json","","# View to render the event schedule page","def event_schedule_view(request):","    return render(request, 'event_schedule.html')","","# Fetch events in JSON format for FullCalendar","def event_schedule_events(request):","    events = Event.objects.all()","    event_list = []","    for event in events:","        event_list.append({","            'id': event.id,","            'title': event.title,","            'start': event.start_time.isoformat(),","            'end': event.end_time.isoformat(),","        })","    return JsonResponse(event_list, safe=False)","","@csrf_exempt  # Exempt for testing; ensure proper CSRF handling in production","def add_event(request):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            title = data.get('title')","            start_time = parse_datetime(data.get('start'))","            end_time = parse_datetime(data.get('end'))","","            if title and start_time and end_time:","                event = Event.objects.create(","                    title=title,","                    start_time=start_time,","                    end_time=end_time","                )","                return JsonResponse({'status': 'success', 'event_id': event.id}, status=200)","            else:","                return JsonResponse({'error': 'Invalid data'}, status=400)","","        except json.JSONDecodeError:","            return JsonResponse({'error': 'Invalid JSON data'}, status=400)","","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            event = get_object_or_404(Event, id=event_id)","            ","            event.title = data.get('title', event.title)","            event.start_time = parse_datetime(data.get('start', event.start_time.isoformat()))","            event.end_time = parse_datetime(data.get('end', event.end_time.isoformat()))","            event.save()","","            return JsonResponse({'status': 'success'}, status=200)","        except Exception as e:","            return JsonResponse({'error': str(e)}, status=400)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def delete_event(request, event_id):","    if request.method == 'POST':","        try:","            event = get_object_or_404(Event, id=event_id)","            event.delete()","            return JsonResponse({'status': 'success'}, status=200)","        except Event.DoesNotExist:","            return JsonResponse({'error': 'Event not found'}, status=404)","    return JsonResponse({'error': 'Invalid request method'}, status=400)",""],"id":45},{"start":{"row":0,"column":0},"end":{"row":75,"column":0},"action":"insert","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","from .models import Event","from django.utils.dateparse import parse_datetime","import json","","# View to render the event schedule page","def event_schedule_view(request):","    return render(request, 'event_schedule.html')","","# Fetch events in JSON format for FullCalendar","def event_schedule_events(request):","    events = Event.objects.all()","    event_list = []","    for event in events:","        event_list.append({","            'id': event.id,","            'title': event.title,","            'start': event.start_time.isoformat(),","            'end': event.end_time.isoformat(),","        })","    return JsonResponse(event_list, safe=False)","","@csrf_exempt  # Exempt for testing; ensure proper CSRF handling in production","def add_event(request):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            title = data.get('title')","            start_time = parse_datetime(data.get('start'))","            end_time = parse_datetime(data.get('end'))","","            if title and start_time and end_time:","                event = Event.objects.create(","                    title=title,","                    start_time=start_time,","                    end_time=end_time","                )","                return JsonResponse({'status': 'success', 'event_id': event.id}, status=200)","            else:","                return JsonResponse({'error': 'Invalid data'}, status=400)","","        except json.JSONDecodeError:","            return JsonResponse({'error': 'Invalid JSON data'}, status=400)","","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            event = get_object_or_404(Event, id=event_id)","            ","            event.title = data.get('title', event.title)","            event.start_time = parse_datetime(data.get('start', event.start_time.isoformat()))","            event.end_time = parse_datetime(data.get('end', event.end_time.isoformat()))","            event.save()","","            return JsonResponse({'status': 'success'}, status=200)","        except Exception as e:","            return JsonResponse({'error': str(e)}, status=400)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def delete_event(request, event_id):","    if request.method == 'POST':","        try:","            event = get_object_or_404(Event, id=event_id)","            event.delete()","            return JsonResponse({'status': 'success'}, status=200)","        except Event.DoesNotExist:","            return JsonResponse({'error': 'Event not found'}, status=404)","    return JsonResponse({'error': 'Invalid request method'}, status=400)",""]}],[{"start":{"row":0,"column":0},"end":{"row":75,"column":0},"action":"remove","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","from .models import Event","from django.utils.dateparse import parse_datetime","import json","","# View to render the event schedule page","def event_schedule_view(request):","    return render(request, 'event_schedule.html')","","# Fetch events in JSON format for FullCalendar","def event_schedule_events(request):","    events = Event.objects.all()","    event_list = []","    for event in events:","        event_list.append({","            'id': event.id,","            'title': event.title,","            'start': event.start_time.isoformat(),","            'end': event.end_time.isoformat(),","        })","    return JsonResponse(event_list, safe=False)","","@csrf_exempt  # Exempt for testing; ensure proper CSRF handling in production","def add_event(request):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            title = data.get('title')","            start_time = parse_datetime(data.get('start'))","            end_time = parse_datetime(data.get('end'))","","            if title and start_time and end_time:","                event = Event.objects.create(","                    title=title,","                    start_time=start_time,","                    end_time=end_time","                )","                return JsonResponse({'status': 'success', 'event_id': event.id}, status=200)","            else:","                return JsonResponse({'error': 'Invalid data'}, status=400)","","        except json.JSONDecodeError:","            return JsonResponse({'error': 'Invalid JSON data'}, status=400)","","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            event = get_object_or_404(Event, id=event_id)","            ","            event.title = data.get('title', event.title)","            event.start_time = parse_datetime(data.get('start', event.start_time.isoformat()))","            event.end_time = parse_datetime(data.get('end', event.end_time.isoformat()))","            event.save()","","            return JsonResponse({'status': 'success'}, status=200)","        except Exception as e:","            return JsonResponse({'error': str(e)}, status=400)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def delete_event(request, event_id):","    if request.method == 'POST':","        try:","            event = get_object_or_404(Event, id=event_id)","            event.delete()","            return JsonResponse({'status': 'success'}, status=200)","        except Event.DoesNotExist:","            return JsonResponse({'error': 'Event not found'}, status=404)","    return JsonResponse({'error': 'Invalid request method'}, status=400)",""],"id":46},{"start":{"row":0,"column":0},"end":{"row":71,"column":0},"action":"insert","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","from django.utils.dateparse import parse_datetime","import json","from .models import Event","","def event_schedule_view(request):","    return render(request, 'event_schedule.html')","","def event_schedule_events(request):","    events = Event.objects.all()","    event_list = []","    for event in events:","        event_list.append({","            'id': event.id,","            'title': event.title,","            'start': event.start_time.isoformat(),","            'end': event.end_time.isoformat(),","        })","    return JsonResponse(event_list, safe=False)","","@csrf_exempt","def add_event(request):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            title = data.get('title')","            start_time = parse_datetime(data.get('start'))","            end_time = parse_datetime(data.get('end'))","","            if title and start_time and end_time:","                event = Event.objects.create(","                    title=title,","                    start_time=start_time,","                    end_time=end_time","                )","                return JsonResponse({'status': 'success', 'event_id': event.id}, status=200)","            else:","                return JsonResponse({'error': 'Invalid data'}, status=400)","        except json.JSONDecodeError:","            return JsonResponse({'error': 'Invalid JSON'}, status=400)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            event = get_object_or_404(Event, id=event_id)","","            event.title = data.get('title', event.title)","            event.start_time = parse_datetime(data.get('start', event.start_time.isoformat()))","            event.end_time = parse_datetime(data.get('end', event.end_time.isoformat()))","            event.save()","","            return JsonResponse({'status': 'success'}, status=200)","        except Exception as e:","            return JsonResponse({'error': str(e)}, status=400)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def delete_event(request, event_id):","    if request.method == 'POST':","        try:","            event = get_object_or_404(Event, id=event_id)","            event.delete()","            return JsonResponse({'status': 'success'}, status=200)","        except Event.DoesNotExist:","            return JsonResponse({'error': 'Event not found'}, status=404)","    return JsonResponse({'error': 'Invalid request method'}, status=400)",""]}],[{"start":{"row":0,"column":0},"end":{"row":71,"column":0},"action":"remove","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","from django.utils.dateparse import parse_datetime","import json","from .models import Event","","def event_schedule_view(request):","    return render(request, 'event_schedule.html')","","def event_schedule_events(request):","    events = Event.objects.all()","    event_list = []","    for event in events:","        event_list.append({","            'id': event.id,","            'title': event.title,","            'start': event.start_time.isoformat(),","            'end': event.end_time.isoformat(),","        })","    return JsonResponse(event_list, safe=False)","","@csrf_exempt","def add_event(request):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            title = data.get('title')","            start_time = parse_datetime(data.get('start'))","            end_time = parse_datetime(data.get('end'))","","            if title and start_time and end_time:","                event = Event.objects.create(","                    title=title,","                    start_time=start_time,","                    end_time=end_time","                )","                return JsonResponse({'status': 'success', 'event_id': event.id}, status=200)","            else:","                return JsonResponse({'error': 'Invalid data'}, status=400)","        except json.JSONDecodeError:","            return JsonResponse({'error': 'Invalid JSON'}, status=400)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            event = get_object_or_404(Event, id=event_id)","","            event.title = data.get('title', event.title)","            event.start_time = parse_datetime(data.get('start', event.start_time.isoformat()))","            event.end_time = parse_datetime(data.get('end', event.end_time.isoformat()))","            event.save()","","            return JsonResponse({'status': 'success'}, status=200)","        except Exception as e:","            return JsonResponse({'error': str(e)}, status=400)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def delete_event(request, event_id):","    if request.method == 'POST':","        try:","            event = get_object_or_404(Event, id=event_id)","            event.delete()","            return JsonResponse({'status': 'success'}, status=200)","        except Event.DoesNotExist:","            return JsonResponse({'error': 'Event not found'}, status=404)","    return JsonResponse({'error': 'Invalid request method'}, status=400)",""],"id":47},{"start":{"row":0,"column":0},"end":{"row":53,"column":0},"action":"insert","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","from django.utils.dateparse import parse_datetime","from .models import Event","import json","","def event_schedule_view(request):","    return render(request, 'event_schedule.html')","","def event_schedule_events(request):","    events = Event.objects.all()","    event_list = []","    for event in events:","        event_list.append({","            'id': event.id,","            'title': event.title,","            'start': event.start_time.isoformat(),","            'end': event.end_time.isoformat(),","        })","    return JsonResponse(event_list, safe=False)","","@csrf_exempt","def add_event(request):","    if request.method == 'POST':","        data = json.loads(request.body)","        event = Event.objects.create(","            title=data['title'],","            start_time=parse_datetime(data['start']),","            end_time=parse_datetime(data['end'])","        )","        return JsonResponse({'status': 'success', 'event_id': event.id})","    return JsonResponse({'status': 'failed'})","","@csrf_exempt","def edit_event(request, event_id):","    event = get_object_or_404(Event, id=event_id)","    if request.method == 'POST':","        data = json.loads(request.body)","        event.title = data['title']","        event.start_time = parse_datetime(data['start'])","        event.end_time = parse_datetime(data['end'])","        event.save()","        return JsonResponse({'status': 'success'})","    return JsonResponse({'status': 'failed'})","","@csrf_exempt","def delete_event(request, event_id):","    event = get_object_or_404(Event, id=event_id)","    if request.method == 'POST':","        event.delete()","        return JsonResponse({'status': 'success'})","    return JsonResponse({'status': 'failed'})",""]}],[{"start":{"row":0,"column":0},"end":{"row":53,"column":0},"action":"remove","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","from django.utils.dateparse import parse_datetime","from .models import Event","import json","","def event_schedule_view(request):","    return render(request, 'event_schedule.html')","","def event_schedule_events(request):","    events = Event.objects.all()","    event_list = []","    for event in events:","        event_list.append({","            'id': event.id,","            'title': event.title,","            'start': event.start_time.isoformat(),","            'end': event.end_time.isoformat(),","        })","    return JsonResponse(event_list, safe=False)","","@csrf_exempt","def add_event(request):","    if request.method == 'POST':","        data = json.loads(request.body)","        event = Event.objects.create(","            title=data['title'],","            start_time=parse_datetime(data['start']),","            end_time=parse_datetime(data['end'])","        )","        return JsonResponse({'status': 'success', 'event_id': event.id})","    return JsonResponse({'status': 'failed'})","","@csrf_exempt","def edit_event(request, event_id):","    event = get_object_or_404(Event, id=event_id)","    if request.method == 'POST':","        data = json.loads(request.body)","        event.title = data['title']","        event.start_time = parse_datetime(data['start'])","        event.end_time = parse_datetime(data['end'])","        event.save()","        return JsonResponse({'status': 'success'})","    return JsonResponse({'status': 'failed'})","","@csrf_exempt","def delete_event(request, event_id):","    event = get_object_or_404(Event, id=event_id)","    if request.method == 'POST':","        event.delete()","        return JsonResponse({'status': 'success'})","    return JsonResponse({'status': 'failed'})",""],"id":48},{"start":{"row":0,"column":0},"end":{"row":53,"column":0},"action":"insert","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","from .models import Event","from django.utils.dateparse import parse_datetime","import json","","def event_schedule_view(request):","    return render(request, 'event_schedule.html')","","def event_schedule_events(request):","    events = Event.objects.all()","    events_list = []","    for event in events:","        events_list.append({","            'id': event.id,","            'title': event.title,","            'start': event.start_time.isoformat(),","            'end': event.end_time.isoformat(),","        })","    return JsonResponse(events_list, safe=False)","","@csrf_exempt","def add_event(request):","    if request.method == 'POST':","        data = json.loads(request.body)","        title = data.get('title')","        start_time = parse_datetime(data.get('start'))","        end_time = parse_datetime(data.get('end'))","        event = Event.objects.create(","            title=title,","            start_time=start_time,","            end_time=end_time","        )","        return JsonResponse({'status': 'success', 'event_id': event.id})","","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        data = json.loads(request.body)","        event = get_object_or_404(Event, id=event_id)","        event.title = data.get('title')","        event.start_time = parse_datetime(data.get('start'))","        event.end_time = parse_datetime(data.get('end'))","        event.save()","        return JsonResponse({'status': 'success'})","","@csrf_exempt","def delete_event(request, event_id):","    if request.method == 'POST':","        event = get_object_or_404(Event, id=event_id)","        event.delete()","        return JsonResponse({'status': 'success'})",""]}],[{"start":{"row":7,"column":0},"end":{"row":8,"column":49},"action":"remove","lines":["def event_schedule_view(request):","    return render(request, 'event_schedule.html')"],"id":49},{"start":{"row":7,"column":0},"end":{"row":12,"column":0},"action":"insert","lines":["from django.shortcuts import render","","def court_schedule_view(request):","    hours_range = range(1, 13)  # 1 to 12 for AM/PM","    return render(request, 'court_schedule.html', {'hours_range': hours_range})",""]}],[{"start":{"row":0,"column":0},"end":{"row":57,"column":0},"action":"remove","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","from .models import Event","from django.utils.dateparse import parse_datetime","import json","","from django.shortcuts import render","","def court_schedule_view(request):","    hours_range = range(1, 13)  # 1 to 12 for AM/PM","    return render(request, 'court_schedule.html', {'hours_range': hours_range})","","","def event_schedule_events(request):","    events = Event.objects.all()","    events_list = []","    for event in events:","        events_list.append({","            'id': event.id,","            'title': event.title,","            'start': event.start_time.isoformat(),","            'end': event.end_time.isoformat(),","        })","    return JsonResponse(events_list, safe=False)","","@csrf_exempt","def add_event(request):","    if request.method == 'POST':","        data = json.loads(request.body)","        title = data.get('title')","        start_time = parse_datetime(data.get('start'))","        end_time = parse_datetime(data.get('end'))","        event = Event.objects.create(","            title=title,","            start_time=start_time,","            end_time=end_time","        )","        return JsonResponse({'status': 'success', 'event_id': event.id})","","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        data = json.loads(request.body)","        event = get_object_or_404(Event, id=event_id)","        event.title = data.get('title')","        event.start_time = parse_datetime(data.get('start'))","        event.end_time = parse_datetime(data.get('end'))","        event.save()","        return JsonResponse({'status': 'success'})","","@csrf_exempt","def delete_event(request, event_id):","    if request.method == 'POST':","        event = get_object_or_404(Event, id=event_id)","        event.delete()","        return JsonResponse({'status': 'success'})",""],"id":50},{"start":{"row":0,"column":0},"end":{"row":48,"column":0},"action":"insert","lines":["from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","from django.shortcuts import get_object_or_404","from .models import CourtEvent  # Assuming you have a CourtEvent model","import json","","# View to return court schedule data for FullCalendar","def court_schedule(request):","    events = CourtEvent.objects.all()  # Fetch all court events from the database","    events_list = []","","    # Format each event for FullCalendar","    for event in events:","        events_list.append({","            'id': event.id,","            'title': event.title,","            'start': event.start.isoformat(),","            'end': event.end.isoformat(),","        })","","    return JsonResponse(events_list, safe=False)","","","# View to handle adding, editing, and deleting events","@csrf_exempt","def event_management(request, event_id=None):","    if request.method == 'POST':","        data = json.loads(request.body)","        if event_id:  # Editing or deleting an existing event","            event = get_object_or_404(CourtEvent, id=event_id)","            if 'delete' in request.path:  # Delete event","                event.delete()","                return JsonResponse({'status': 'deleted'})","            else:  # Update event","                event.title = data['title']","                event.start = data['start']","                event.end = data['end']","                event.save()","                return JsonResponse({'status': 'updated'})","        else:  # Adding a new event","            new_event = CourtEvent.objects.create(","                title=data['title'],","                start=data['start'],","                end=data['end'],","            )","            return JsonResponse({'status': 'added', 'event_id': new_event.id})","","    return JsonResponse({'error': 'Invalid request method'}, status=400)",""]}],[{"start":{"row":0,"column":0},"end":{"row":48,"column":0},"action":"remove","lines":["from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","from django.shortcuts import get_object_or_404","from .models import CourtEvent  # Assuming you have a CourtEvent model","import json","","# View to return court schedule data for FullCalendar","def court_schedule(request):","    events = CourtEvent.objects.all()  # Fetch all court events from the database","    events_list = []","","    # Format each event for FullCalendar","    for event in events:","        events_list.append({","            'id': event.id,","            'title': event.title,","            'start': event.start.isoformat(),","            'end': event.end.isoformat(),","        })","","    return JsonResponse(events_list, safe=False)","","","# View to handle adding, editing, and deleting events","@csrf_exempt","def event_management(request, event_id=None):","    if request.method == 'POST':","        data = json.loads(request.body)","        if event_id:  # Editing or deleting an existing event","            event = get_object_or_404(CourtEvent, id=event_id)","            if 'delete' in request.path:  # Delete event","                event.delete()","                return JsonResponse({'status': 'deleted'})","            else:  # Update event","                event.title = data['title']","                event.start = data['start']","                event.end = data['end']","                event.save()","                return JsonResponse({'status': 'updated'})","        else:  # Adding a new event","            new_event = CourtEvent.objects.create(","                title=data['title'],","                start=data['start'],","                end=data['end'],","            )","            return JsonResponse({'status': 'added', 'event_id': new_event.id})","","    return JsonResponse({'error': 'Invalid request method'}, status=400)",""],"id":51},{"start":{"row":0,"column":0},"end":{"row":48,"column":0},"action":"insert","lines":["from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","from django.shortcuts import get_object_or_404","from .models import CourtEvent  # Assuming you have a CourtEvent model","import json","","# View to return court schedule data for FullCalendar","def court_schedule(request):","    events = CourtEvent.objects.all()  # Fetch all court events from the database","    events_list = []","","    # Format each event for FullCalendar","    for event in events:","        events_list.append({","            'id': event.id,","            'title': event.title,","            'start': event.start.isoformat(),","            'end': event.end.isoformat(),","        })","","    return JsonResponse(events_list, safe=False)","","","# View to handle adding, editing, and deleting events","@csrf_exempt","def event_management(request, event_id=None):","    if request.method == 'POST':","        data = json.loads(request.body)","        if event_id:  # Editing or deleting an existing event","            event = get_object_or_404(CourtEvent, id=event_id)","            if 'delete' in request.path:  # Delete event","                event.delete()","                return JsonResponse({'status': 'deleted'})","            else:  # Update event","                event.title = data['title']","                event.start = data['start']","                event.end = data['end']","                event.save()","                return JsonResponse({'status': 'updated'})","        else:  # Adding a new event","            new_event = CourtEvent.objects.create(","                title=data['title'],","                start=data['start'],","                end=data['end'],","            )","            return JsonResponse({'status': 'added', 'event_id': new_event.id})","","    return JsonResponse({'error': 'Invalid request method'}, status=400)",""]}],[{"start":{"row":5,"column":0},"end":{"row":6,"column":0},"action":"insert","lines":["",""],"id":52},{"start":{"row":6,"column":0},"end":{"row":7,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":6,"column":0},"end":{"row":11,"column":0},"action":"insert","lines":["from django.shortcuts import render","","def court_schedule_view(request):","    hours_range = range(1, 13)  # 1 to 12 for AM/PM","    return render(request, 'court_schedule.html', {'hours_range': hours_range})",""],"id":53}],[{"start":{"row":4,"column":11},"end":{"row":5,"column":0},"action":"remove","lines":["",""],"id":54}],[{"start":{"row":0,"column":0},"end":{"row":54,"column":0},"action":"remove","lines":["from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","from django.shortcuts import get_object_or_404","from .models import CourtEvent  # Assuming you have a CourtEvent model","import json","from django.shortcuts import render","","def court_schedule_view(request):","    hours_range = range(1, 13)  # 1 to 12 for AM/PM","    return render(request, 'court_schedule.html', {'hours_range': hours_range})","","","# View to return court schedule data for FullCalendar","def court_schedule(request):","    events = CourtEvent.objects.all()  # Fetch all court events from the database","    events_list = []","","    # Format each event for FullCalendar","    for event in events:","        events_list.append({","            'id': event.id,","            'title': event.title,","            'start': event.start.isoformat(),","            'end': event.end.isoformat(),","        })","","    return JsonResponse(events_list, safe=False)","","","# View to handle adding, editing, and deleting events","@csrf_exempt","def event_management(request, event_id=None):","    if request.method == 'POST':","        data = json.loads(request.body)","        if event_id:  # Editing or deleting an existing event","            event = get_object_or_404(CourtEvent, id=event_id)","            if 'delete' in request.path:  # Delete event","                event.delete()","                return JsonResponse({'status': 'deleted'})","            else:  # Update event","                event.title = data['title']","                event.start = data['start']","                event.end = data['end']","                event.save()","                return JsonResponse({'status': 'updated'})","        else:  # Adding a new event","            new_event = CourtEvent.objects.create(","                title=data['title'],","                start=data['start'],","                end=data['end'],","            )","            return JsonResponse({'status': 'added', 'event_id': new_event.id})","","    return JsonResponse({'error': 'Invalid request method'}, status=400)",""],"id":55},{"start":{"row":0,"column":0},"end":{"row":78,"column":0},"action":"insert","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","from .models import CourtBooking, Court","from django.utils.dateparse import parse_datetime","import json","","# View to render the court schedule page","def court_schedule_view(request):","    hours_range = range(1, 13)  # 1 to 12 for AM/PM","    return render(request, 'court_schedule.html', {'hours_range': hours_range})","","# Fetch events (court bookings) in JSON format for FullCalendar","def court_schedule_events(request):","    bookings = CourtBooking.objects.all()","    events = []","    for booking in bookings:","        events.append({","            'id': booking.id,","            'title': booking.title,","            'start': booking.start_time.isoformat(),","            'end': booking.end_time.isoformat(),","            'court': booking.court.name,","        })","    return JsonResponse(events, safe=False)","","# Add new event (court booking)","@csrf_exempt  # Exempt from CSRF for testing; ensure proper CSRF handling in production","def add_event(request):","    if request.method == 'POST':","        data = json.loads(request.body)","        try:","            court = Court.objects.get(id=data.get('court_id'))","            title = data.get('title')","            start_time = parse_datetime(data.get('start'))","            end_time = parse_datetime(data.get('end'))","","            if start_time and end_time and court:","                booking = CourtBooking.objects.create(","                    court=court,","                    title=title,","                    start_time=start_time,","                    end_time=end_time","                )","                return JsonResponse({'status': 'success', 'event_id': booking.id}, status=200)","            else:","                return JsonResponse({'error': 'Invalid data'}, status=400)","        except Court.DoesNotExist:","            return JsonResponse({'error': 'Court not found'}, status=404)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","# Edit existing event (court booking)","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        data = json.loads(request.body)","        booking = get_object_or_404(CourtBooking, id=event_id)","        try:","            booking.title = data.get('title', booking.title)","            booking.start_time = parse_datetime(data.get('start', booking.start_time.isoformat()))","            booking.end_time = parse_datetime(data.get('end', booking.end_time.isoformat()))","            booking.save()","            return JsonResponse({'status': 'success'}, status=200)","        except Exception as e:","            return JsonResponse({'error': str(e)}, status=400)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","# Delete an event (court booking)","@csrf_exempt","def delete_event(request, event_id):","    if request.method == 'POST':","        try:","            booking = get_object_or_404(CourtBooking, id=event_id)","            booking.delete()","            return JsonResponse({'status': 'success'}, status=200)","        except CourtBooking.DoesNotExist:","            return JsonResponse({'error': 'Booking not found'}, status=404)","    return JsonResponse({'error': 'Invalid request method'}, status=400)",""]}],[{"start":{"row":0,"column":0},"end":{"row":78,"column":0},"action":"remove","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","from .models import CourtBooking, Court","from django.utils.dateparse import parse_datetime","import json","","# View to render the court schedule page","def court_schedule_view(request):","    hours_range = range(1, 13)  # 1 to 12 for AM/PM","    return render(request, 'court_schedule.html', {'hours_range': hours_range})","","# Fetch events (court bookings) in JSON format for FullCalendar","def court_schedule_events(request):","    bookings = CourtBooking.objects.all()","    events = []","    for booking in bookings:","        events.append({","            'id': booking.id,","            'title': booking.title,","            'start': booking.start_time.isoformat(),","            'end': booking.end_time.isoformat(),","            'court': booking.court.name,","        })","    return JsonResponse(events, safe=False)","","# Add new event (court booking)","@csrf_exempt  # Exempt from CSRF for testing; ensure proper CSRF handling in production","def add_event(request):","    if request.method == 'POST':","        data = json.loads(request.body)","        try:","            court = Court.objects.get(id=data.get('court_id'))","            title = data.get('title')","            start_time = parse_datetime(data.get('start'))","            end_time = parse_datetime(data.get('end'))","","            if start_time and end_time and court:","                booking = CourtBooking.objects.create(","                    court=court,","                    title=title,","                    start_time=start_time,","                    end_time=end_time","                )","                return JsonResponse({'status': 'success', 'event_id': booking.id}, status=200)","            else:","                return JsonResponse({'error': 'Invalid data'}, status=400)","        except Court.DoesNotExist:","            return JsonResponse({'error': 'Court not found'}, status=404)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","# Edit existing event (court booking)","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        data = json.loads(request.body)","        booking = get_object_or_404(CourtBooking, id=event_id)","        try:","            booking.title = data.get('title', booking.title)","            booking.start_time = parse_datetime(data.get('start', booking.start_time.isoformat()))","            booking.end_time = parse_datetime(data.get('end', booking.end_time.isoformat()))","            booking.save()","            return JsonResponse({'status': 'success'}, status=200)","        except Exception as e:","            return JsonResponse({'error': str(e)}, status=400)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","# Delete an event (court booking)","@csrf_exempt","def delete_event(request, event_id):","    if request.method == 'POST':","        try:","            booking = get_object_or_404(CourtBooking, id=event_id)","            booking.delete()","            return JsonResponse({'status': 'success'}, status=200)","        except CourtBooking.DoesNotExist:","            return JsonResponse({'error': 'Booking not found'}, status=404)","    return JsonResponse({'error': 'Invalid request method'}, status=400)",""],"id":56},{"start":{"row":0,"column":0},"end":{"row":78,"column":0},"action":"insert","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","from .models import CourtBooking, Court","from django.utils.dateparse import parse_datetime","import json","","# View to render the court schedule page","def court_schedule_view(request):","    hours_range = range(1, 13)  # 1 to 12 for AM/PM","    return render(request, 'court_schedule.html', {'hours_range': hours_range})","","# Fetch events (court bookings) in JSON format for FullCalendar","def court_schedule_events(request):","    bookings = CourtBooking.objects.all()","    events = []","    for booking in bookings:","        events.append({","            'id': booking.id,","            'title': booking.title,","            'start': booking.start_time.isoformat(),","            'end': booking.end_time.isoformat(),","            'court': booking.court.name,","        })","    return JsonResponse(events, safe=False)","","# Add new event (court booking)","@csrf_exempt  # Exempt from CSRF for testing; ensure proper CSRF handling in production","def add_event(request):","    if request.method == 'POST':","        data = json.loads(request.body)","        try:","            court = Court.objects.get(id=data.get('court_id'))","            title = data.get('title')","            start_time = parse_datetime(data.get('start'))","            end_time = parse_datetime(data.get('end'))","","            if start_time and end_time and court:","                booking = CourtBooking.objects.create(","                    court=court,","                    title=title,","                    start_time=start_time,","                    end_time=end_time","                )","                return JsonResponse({'status': 'success', 'event_id': booking.id}, status=200)","            else:","                return JsonResponse({'error': 'Invalid data'}, status=400)","        except Court.DoesNotExist:","            return JsonResponse({'error': 'Court not found'}, status=404)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","# Edit existing event (court booking)","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        data = json.loads(request.body)","        booking = get_object_or_404(CourtBooking, id=event_id)","        try:","            booking.title = data.get('title', booking.title)","            booking.start_time = parse_datetime(data.get('start', booking.start_time.isoformat()))","            booking.end_time = parse_datetime(data.get('end', booking.end_time.isoformat()))","            booking.save()","            return JsonResponse({'status': 'success'}, status=200)","        except Exception as e:","            return JsonResponse({'error': str(e)}, status=400)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","# Delete an event (court booking)","@csrf_exempt","def delete_event(request, event_id):","    if request.method == 'POST':","        try:","            booking = get_object_or_404(CourtBooking, id=event_id)","            booking.delete()","            return JsonResponse({'status': 'success'}, status=200)","        except CourtBooking.DoesNotExist:","            return JsonResponse({'error': 'Booking not found'}, status=404)","    return JsonResponse({'error': 'Invalid request method'}, status=400)",""]}],[{"start":{"row":27,"column":0},"end":{"row":50,"column":0},"action":"remove","lines":["@csrf_exempt  # Exempt from CSRF for testing; ensure proper CSRF handling in production","def add_event(request):","    if request.method == 'POST':","        data = json.loads(request.body)","        try:","            court = Court.objects.get(id=data.get('court_id'))","            title = data.get('title')","            start_time = parse_datetime(data.get('start'))","            end_time = parse_datetime(data.get('end'))","","            if start_time and end_time and court:","                booking = CourtBooking.objects.create(","                    court=court,","                    title=title,","                    start_time=start_time,","                    end_time=end_time","                )","                return JsonResponse({'status': 'success', 'event_id': booking.id}, status=200)","            else:","                return JsonResponse({'error': 'Invalid data'}, status=400)","        except Court.DoesNotExist:","            return JsonResponse({'error': 'Court not found'}, status=404)","    return JsonResponse({'error': 'Invalid request method'}, status=400)",""],"id":57},{"start":{"row":27,"column":0},"end":{"row":55,"column":0},"action":"insert","lines":["@csrf_exempt  # Exempt from CSRF for testing; ensure proper CSRF handling in production","def add_event(request):","    if request.method == 'POST':","        try:","            if not request.body:","                return JsonResponse({'error': 'Empty request body'}, status=400)","            ","            data = json.loads(request.body)","            court = Court.objects.get(id=data.get('court_id'))","            title = data.get('title')","            start_time = parse_datetime(data.get('start'))","            end_time = parse_datetime(data.get('end'))","","            if start_time and end_time and court:","                booking = CourtBooking.objects.create(","                    court=court,","                    title=title,","                    start_time=start_time,","                    end_time=end_time","                )","                return JsonResponse({'status': 'success', 'event_id': booking.id}, status=200)","            else:","                return JsonResponse({'error': 'Invalid data'}, status=400)","        except Court.DoesNotExist:","            return JsonResponse({'error': 'Court not found'}, status=404)","        except json.JSONDecodeError:","            return JsonResponse({'error': 'Invalid JSON data'}, status=400)","    return JsonResponse({'error': 'Invalid request method'}, status=400)",""]}],[{"start":{"row":0,"column":0},"end":{"row":83,"column":0},"action":"remove","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","from .models import CourtBooking, Court","from django.utils.dateparse import parse_datetime","import json","","# View to render the court schedule page","def court_schedule_view(request):","    hours_range = range(1, 13)  # 1 to 12 for AM/PM","    return render(request, 'court_schedule.html', {'hours_range': hours_range})","","# Fetch events (court bookings) in JSON format for FullCalendar","def court_schedule_events(request):","    bookings = CourtBooking.objects.all()","    events = []","    for booking in bookings:","        events.append({","            'id': booking.id,","            'title': booking.title,","            'start': booking.start_time.isoformat(),","            'end': booking.end_time.isoformat(),","            'court': booking.court.name,","        })","    return JsonResponse(events, safe=False)","","# Add new event (court booking)","@csrf_exempt  # Exempt from CSRF for testing; ensure proper CSRF handling in production","def add_event(request):","    if request.method == 'POST':","        try:","            if not request.body:","                return JsonResponse({'error': 'Empty request body'}, status=400)","            ","            data = json.loads(request.body)","            court = Court.objects.get(id=data.get('court_id'))","            title = data.get('title')","            start_time = parse_datetime(data.get('start'))","            end_time = parse_datetime(data.get('end'))","","            if start_time and end_time and court:","                booking = CourtBooking.objects.create(","                    court=court,","                    title=title,","                    start_time=start_time,","                    end_time=end_time","                )","                return JsonResponse({'status': 'success', 'event_id': booking.id}, status=200)","            else:","                return JsonResponse({'error': 'Invalid data'}, status=400)","        except Court.DoesNotExist:","            return JsonResponse({'error': 'Court not found'}, status=404)","        except json.JSONDecodeError:","            return JsonResponse({'error': 'Invalid JSON data'}, status=400)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","# Edit existing event (court booking)","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        data = json.loads(request.body)","        booking = get_object_or_404(CourtBooking, id=event_id)","        try:","            booking.title = data.get('title', booking.title)","            booking.start_time = parse_datetime(data.get('start', booking.start_time.isoformat()))","            booking.end_time = parse_datetime(data.get('end', booking.end_time.isoformat()))","            booking.save()","            return JsonResponse({'status': 'success'}, status=200)","        except Exception as e:","            return JsonResponse({'error': str(e)}, status=400)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","# Delete an event (court booking)","@csrf_exempt","def delete_event(request, event_id):","    if request.method == 'POST':","        try:","            booking = get_object_or_404(CourtBooking, id=event_id)","            booking.delete()","            return JsonResponse({'status': 'success'}, status=200)","        except CourtBooking.DoesNotExist:","            return JsonResponse({'error': 'Booking not found'}, status=404)","    return JsonResponse({'error': 'Invalid request method'}, status=400)",""],"id":62},{"start":{"row":0,"column":0},"end":{"row":77,"column":72},"action":"insert","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","from .models import CourtBooking, Court","from django.utils.dateparse import parse_datetime","import json","","# View to render the court schedule page","def court_schedule_view(request):","    hours_range = range(1, 13)  # 1 to 12 for AM/PM","    return render(request, 'court_schedule.html', {'hours_range': hours_range})","","# Fetch events (court bookings) in JSON format for FullCalendar","def court_schedule_events(request):","    bookings = CourtBooking.objects.all()","    events = []","    for booking in bookings:","        events.append({","            'id': booking.id,","            'title': booking.title,","            'start': booking.start_time.isoformat(),","            'end': booking.end_time.isoformat(),","            'court': booking.court.name,","        })","    return JsonResponse(events, safe=False)","","# Add new event (court booking)","@csrf_exempt  # Exempt from CSRF for testing; ensure proper CSRF handling in production","def add_event(request):","    if request.method == 'POST':","        data = json.loads(request.body)","        try:","            court = Court.objects.get(id=data.get('court_id'))","            title = data.get('title')","            start_time = parse_datetime(data.get('start'))","            end_time = parse_datetime(data.get('end'))","","            if start_time and end_time and court:","                booking = CourtBooking.objects.create(","                    court=court,","                    title=title,","                    start_time=start_time,","                    end_time=end_time","                )","                return JsonResponse({'status': 'success', 'event_id': booking.id}, status=200)","            else:","                return JsonResponse({'error': 'Invalid data'}, status=400)","        except Court.DoesNotExist:","            return JsonResponse({'error': 'Court not found'}, status=404)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","# Edit existing event (court booking)","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        data = json.loads(request.body)","        booking = get_object_or_404(CourtBooking, id=event_id)","        try:","            booking.title = data.get('title', booking.title)","            booking.start_time = parse_datetime(data.get('start', booking.start_time.isoformat()))","            booking.end_time = parse_datetime(data.get('end', booking.end_time.isoformat()))","            booking.save()","            return JsonResponse({'status': 'success'}, status=200)","        except Exception as e:","            return JsonResponse({'error': str(e)}, status=400)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","# Delete an event (court booking)","@csrf_exempt","def delete_event(request, event_id):","    if request.method == 'POST':","        try:","            booking = get_object_or_404(CourtBooking, id=event_id)","            booking.delete()","            return JsonResponse({'status': 'success'}, status=200)","        except CourtBooking.DoesNotExist:","            return JsonResponse({'error': 'Booking not found'}, status=404)","    return JsonResponse({'error': 'Invalid request method'}, status=400)"]}],[{"start":{"row":0,"column":0},"end":{"row":77,"column":72},"action":"remove","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","from .models import CourtBooking, Court","from django.utils.dateparse import parse_datetime","import json","","# View to render the court schedule page","def court_schedule_view(request):","    hours_range = range(1, 13)  # 1 to 12 for AM/PM","    return render(request, 'court_schedule.html', {'hours_range': hours_range})","","# Fetch events (court bookings) in JSON format for FullCalendar","def court_schedule_events(request):","    bookings = CourtBooking.objects.all()","    events = []","    for booking in bookings:","        events.append({","            'id': booking.id,","            'title': booking.title,","            'start': booking.start_time.isoformat(),","            'end': booking.end_time.isoformat(),","            'court': booking.court.name,","        })","    return JsonResponse(events, safe=False)","","# Add new event (court booking)","@csrf_exempt  # Exempt from CSRF for testing; ensure proper CSRF handling in production","def add_event(request):","    if request.method == 'POST':","        data = json.loads(request.body)","        try:","            court = Court.objects.get(id=data.get('court_id'))","            title = data.get('title')","            start_time = parse_datetime(data.get('start'))","            end_time = parse_datetime(data.get('end'))","","            if start_time and end_time and court:","                booking = CourtBooking.objects.create(","                    court=court,","                    title=title,","                    start_time=start_time,","                    end_time=end_time","                )","                return JsonResponse({'status': 'success', 'event_id': booking.id}, status=200)","            else:","                return JsonResponse({'error': 'Invalid data'}, status=400)","        except Court.DoesNotExist:","            return JsonResponse({'error': 'Court not found'}, status=404)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","# Edit existing event (court booking)","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        data = json.loads(request.body)","        booking = get_object_or_404(CourtBooking, id=event_id)","        try:","            booking.title = data.get('title', booking.title)","            booking.start_time = parse_datetime(data.get('start', booking.start_time.isoformat()))","            booking.end_time = parse_datetime(data.get('end', booking.end_time.isoformat()))","            booking.save()","            return JsonResponse({'status': 'success'}, status=200)","        except Exception as e:","            return JsonResponse({'error': str(e)}, status=400)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","# Delete an event (court booking)","@csrf_exempt","def delete_event(request, event_id):","    if request.method == 'POST':","        try:","            booking = get_object_or_404(CourtBooking, id=event_id)","            booking.delete()","            return JsonResponse({'status': 'success'}, status=200)","        except CourtBooking.DoesNotExist:","            return JsonResponse({'error': 'Booking not found'}, status=404)","    return JsonResponse({'error': 'Invalid request method'}, status=400)"],"id":72},{"start":{"row":0,"column":0},"end":{"row":38,"column":0},"action":"insert","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","import json","from django.utils.dateparse import parse_datetime","","def event_schedule_view(request):","    return render(request, 'event_schedule.html')","","def event_schedule_events(request):","    events = [","        {'id': 1, 'title': 'Event 1', 'start': '2024-09-12T10:00:00', 'end': '2024-09-12T12:00:00'},","        {'id': 2, 'title': 'Event 2', 'start': '2024-09-14T14:00:00', 'end': '2024-09-14T16:00:00'}","    ]","    return JsonResponse(events, safe=False)","","@csrf_exempt","def add_event(request):","    if request.method == 'POST':","        data = json.loads(request.body)","        title = data.get('title')","        start_time = parse_datetime(data.get('start'))","        end_time = parse_datetime(data.get('end'))","        return JsonResponse({'status': 'success', 'event_id': 1}, status=200)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        data = json.loads(request.body)","        return JsonResponse({'status': 'success'}, status=200)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def delete_event(request, event_id):","    if request.method == 'POST':","        return JsonResponse({'status': 'success'}, status=200)","    return JsonResponse({'error': 'Invalid request method'}, status=400)",""]}],[{"start":{"row":0,"column":0},"end":{"row":38,"column":0},"action":"remove","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","import json","from django.utils.dateparse import parse_datetime","","def event_schedule_view(request):","    return render(request, 'event_schedule.html')","","def event_schedule_events(request):","    events = [","        {'id': 1, 'title': 'Event 1', 'start': '2024-09-12T10:00:00', 'end': '2024-09-12T12:00:00'},","        {'id': 2, 'title': 'Event 2', 'start': '2024-09-14T14:00:00', 'end': '2024-09-14T16:00:00'}","    ]","    return JsonResponse(events, safe=False)","","@csrf_exempt","def add_event(request):","    if request.method == 'POST':","        data = json.loads(request.body)","        title = data.get('title')","        start_time = parse_datetime(data.get('start'))","        end_time = parse_datetime(data.get('end'))","        return JsonResponse({'status': 'success', 'event_id': 1}, status=200)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        data = json.loads(request.body)","        return JsonResponse({'status': 'success'}, status=200)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def delete_event(request, event_id):","    if request.method == 'POST':","        return JsonResponse({'status': 'success'}, status=200)","    return JsonResponse({'error': 'Invalid request method'}, status=400)",""],"id":73},{"start":{"row":0,"column":0},"end":{"row":66,"column":0},"action":"insert","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","from django.utils.dateparse import parse_datetime","import json","from .models import Event","","def event_schedule_view(request):","    return render(request, 'event_schedule.html')","","def event_schedule_events(request):","    # Fetch all events from the database and return them in JSON format","    events = Event.objects.all()","    event_list = []","    for event in events:","        event_list.append({","            'id': event.id,","            'title': event.title,","            'start': event.start_time.isoformat(),","            'end': event.end_time.isoformat()","        })","    return JsonResponse(event_list, safe=False)","","@csrf_exempt","def add_event(request):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            title = data.get('title')","            start_time = parse_datetime(data.get('start'))","            end_time = parse_datetime(data.get('end'))","","            if title and start_time and end_time:","                # Create and save the event in the database","                event = Event.objects.create(title=title, start_time=start_time, end_time=end_time)","                return JsonResponse({'status': 'success', 'event_id': event.id}, status=200)","            else:","                return JsonResponse({'error': 'Invalid data'}, status=400)","        except json.JSONDecodeError:","            return JsonResponse({'error': 'Invalid JSON data'}, status=400)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            event = get_object_or_404(Event, id=event_id)","            event.title = data.get('title', event.title)","            event.start_time = parse_datetime(data.get('start', event.start_time.isoformat()))","            event.end_time = parse_datetime(data.get('end', event.end_time.isoformat()))","            event.save()","            return JsonResponse({'status': 'success'}, status=200)","        except json.JSONDecodeError:","            return JsonResponse({'error': 'Invalid JSON data'}, status=400)","        except Event.DoesNotExist:","            return JsonResponse({'error': 'Event not found'}, status=404)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def delete_event(request, event_id):","    if request.method == 'POST':","        event = get_object_or_404(Event, id=event_id)","        event.delete()","        return JsonResponse({'status': 'success'}, status=200)","    return JsonResponse({'error': 'Invalid request method'}, status=400)",""]}],[{"start":{"row":0,"column":0},"end":{"row":21,"column":47},"action":"remove","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","from django.utils.dateparse import parse_datetime","import json","from .models import Event","","def event_schedule_view(request):","    return render(request, 'event_schedule.html')","","def event_schedule_events(request):","    # Fetch all events from the database and return them in JSON format","    events = Event.objects.all()","    event_list = []","    for event in events:","        event_list.append({","            'id': event.id,","            'title': event.title,","            'start': event.start_time.isoformat(),","            'end': event.end_time.isoformat()","        })","    return JsonResponse(event_list, safe=False)"],"id":74},{"start":{"row":0,"column":0},"end":{"row":17,"column":0},"action":"insert","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","import json","from django.utils.dateparse import parse_datetime","","# View to render the court schedule page","def court_schedule_view(request):","    return render(request, 'court_schedule.html')","","# View to fetch events in JSON format for FullCalendar","def court_schedule_events(request):","    events = [","        {'id': 1, 'title': 'Event 1', 'start': '2024-09-12T10:00:00', 'end': '2024-09-12T12:00:00'},","        {'id': 2, 'title': 'Event 2', 'start': '2024-09-14T14:00:00', 'end': '2024-09-14T16:00:00'}","    ]","    return JsonResponse(events, safe=False)",""]}],[{"start":{"row":0,"column":0},"end":{"row":62,"column":0},"action":"remove","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","import json","from django.utils.dateparse import parse_datetime","","# View to render the court schedule page","def court_schedule_view(request):","    return render(request, 'court_schedule.html')","","# View to fetch events in JSON format for FullCalendar","def court_schedule_events(request):","    events = [","        {'id': 1, 'title': 'Event 1', 'start': '2024-09-12T10:00:00', 'end': '2024-09-12T12:00:00'},","        {'id': 2, 'title': 'Event 2', 'start': '2024-09-14T14:00:00', 'end': '2024-09-14T16:00:00'}","    ]","    return JsonResponse(events, safe=False)","","","@csrf_exempt","def add_event(request):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            title = data.get('title')","            start_time = parse_datetime(data.get('start'))","            end_time = parse_datetime(data.get('end'))","","            if title and start_time and end_time:","                # Create and save the event in the database","                event = Event.objects.create(title=title, start_time=start_time, end_time=end_time)","                return JsonResponse({'status': 'success', 'event_id': event.id}, status=200)","            else:","                return JsonResponse({'error': 'Invalid data'}, status=400)","        except json.JSONDecodeError:","            return JsonResponse({'error': 'Invalid JSON data'}, status=400)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            event = get_object_or_404(Event, id=event_id)","            event.title = data.get('title', event.title)","            event.start_time = parse_datetime(data.get('start', event.start_time.isoformat()))","            event.end_time = parse_datetime(data.get('end', event.end_time.isoformat()))","            event.save()","            return JsonResponse({'status': 'success'}, status=200)","        except json.JSONDecodeError:","            return JsonResponse({'error': 'Invalid JSON data'}, status=400)","        except Event.DoesNotExist:","            return JsonResponse({'error': 'Event not found'}, status=404)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def delete_event(request, event_id):","    if request.method == 'POST':","        event = get_object_or_404(Event, id=event_id)","        event.delete()","        return JsonResponse({'status': 'success'}, status=200)","    return JsonResponse({'error': 'Invalid request method'}, status=400)",""],"id":75},{"start":{"row":0,"column":0},"end":{"row":67,"column":0},"action":"insert","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","from .models import Event  # Import the Event model","import json","from django.utils.dateparse import parse_datetime","","# View to render the court schedule page","def court_schedule_view(request):","    return render(request, 'court_schedule.html')","","# View to fetch events in JSON format for FullCalendar","def court_schedule_events(request):","    events = Event.objects.all()  # Fetch all events from the database","    events_list = [","        {","            'id': event.id,","            'title': event.title,","            'start': event.start_time.isoformat(),","            'end': event.end_time.isoformat()","        } for event in events","    ]","    return JsonResponse(events_list, safe=False)","","@csrf_exempt","def add_event(request):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            title = data.get('title')","            start_time = parse_datetime(data.get('start'))","            end_time = parse_datetime(data.get('end'))","","            if title and start_time and end_time:","                # Create and save the event in the database","                event = Event.objects.create(title=title, start_time=start_time, end_time=end_time)","                return JsonResponse({'status': 'success', 'event_id': event.id}, status=200)","            else:","                return JsonResponse({'error': 'Invalid data'}, status=400)","        except json.JSONDecodeError:","            return JsonResponse({'error': 'Invalid JSON data'}, status=400)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            event = get_object_or_404(Event, id=event_id)","            event.title = data.get('title', event.title)","            event.start_time = parse_datetime(data.get('start', event.start_time.isoformat()))","            event.end_time = parse_datetime(data.get('end', event.end_time.isoformat()))","            event.save()","            return JsonResponse({'status': 'success'}, status=200)","        except json.JSONDecodeError:","            return JsonResponse({'error': 'Invalid JSON data'}, status=400)","        except Event.DoesNotExist:","            return JsonResponse({'error': 'Event not found'}, status=404)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def delete_event(request, event_id):","    if request.method == 'POST':","        event = get_object_or_404(Event, id=event_id)","        event.delete()","        return JsonResponse({'status': 'success'}, status=200)","    return JsonResponse({'error': 'Invalid request method'}, status=400)",""]}],[{"start":{"row":0,"column":0},"end":{"row":67,"column":0},"action":"remove","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","from .models import Event  # Import the Event model","import json","from django.utils.dateparse import parse_datetime","","# View to render the court schedule page","def court_schedule_view(request):","    return render(request, 'court_schedule.html')","","# View to fetch events in JSON format for FullCalendar","def court_schedule_events(request):","    events = Event.objects.all()  # Fetch all events from the database","    events_list = [","        {","            'id': event.id,","            'title': event.title,","            'start': event.start_time.isoformat(),","            'end': event.end_time.isoformat()","        } for event in events","    ]","    return JsonResponse(events_list, safe=False)","","@csrf_exempt","def add_event(request):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            title = data.get('title')","            start_time = parse_datetime(data.get('start'))","            end_time = parse_datetime(data.get('end'))","","            if title and start_time and end_time:","                # Create and save the event in the database","                event = Event.objects.create(title=title, start_time=start_time, end_time=end_time)","                return JsonResponse({'status': 'success', 'event_id': event.id}, status=200)","            else:","                return JsonResponse({'error': 'Invalid data'}, status=400)","        except json.JSONDecodeError:","            return JsonResponse({'error': 'Invalid JSON data'}, status=400)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            event = get_object_or_404(Event, id=event_id)","            event.title = data.get('title', event.title)","            event.start_time = parse_datetime(data.get('start', event.start_time.isoformat()))","            event.end_time = parse_datetime(data.get('end', event.end_time.isoformat()))","            event.save()","            return JsonResponse({'status': 'success'}, status=200)","        except json.JSONDecodeError:","            return JsonResponse({'error': 'Invalid JSON data'}, status=400)","        except Event.DoesNotExist:","            return JsonResponse({'error': 'Event not found'}, status=404)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def delete_event(request, event_id):","    if request.method == 'POST':","        event = get_object_or_404(Event, id=event_id)","        event.delete()","        return JsonResponse({'status': 'success'}, status=200)","    return JsonResponse({'error': 'Invalid request method'}, status=400)",""],"id":76},{"start":{"row":0,"column":0},"end":{"row":64,"column":0},"action":"insert","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","import json","from django.utils.dateparse import parse_datetime","from .models import Event","","def court_schedule_view(request):","    return render(request, 'court_schedule.html')","","def court_schedule_events(request):","    events = Event.objects.all()","    events_data = []","    for event in events:","        events_data.append({","            'id': event.id,","            'title': event.title,","            'start': event.start_time.isoformat(),","            'end': event.end_time.isoformat(),","        })","    return JsonResponse(events_data, safe=False)","","@csrf_exempt","def add_event(request):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            title = data.get('title')","            start_time = parse_datetime(data.get('start'))","            end_time = parse_datetime(data.get('end'))","","            if title and start_time and end_time:","                event = Event.objects.create(title=title, start_time=start_time, end_time=end_time)","                return JsonResponse({'status': 'success', 'event_id': event.id}, status=200)","            else:","                return JsonResponse({'error': 'Invalid data'}, status=400)","        except json.JSONDecodeError:","            return JsonResponse({'error': 'Invalid JSON data'}, status=400)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            event = get_object_or_404(Event, id=event_id)","            event.title = data.get('title', event.title)","            event.start_time = parse_datetime(data.get('start', event.start_time.isoformat()))","            event.end_time = parse_datetime(data.get('end', event.end_time.isoformat()))","            event.save()","            return JsonResponse({'status': 'success'}, status=200)","        except json.JSONDecodeError:","            return JsonResponse({'error': 'Invalid JSON data'}, status=400)","        except Event.DoesNotExist:","            return JsonResponse({'error': 'Event not found'}, status=404)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def delete_event(request, event_id):","    if request.method == 'POST':","        event = get_object_or_404(Event, id=event_id)","        event.delete()","        return JsonResponse({'status': 'success'}, status=200)","    return JsonResponse({'error': 'Invalid request method'}, status=400)",""]}],[{"start":{"row":0,"column":0},"end":{"row":64,"column":0},"action":"remove","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","import json","from django.utils.dateparse import parse_datetime","from .models import Event","","def court_schedule_view(request):","    return render(request, 'court_schedule.html')","","def court_schedule_events(request):","    events = Event.objects.all()","    events_data = []","    for event in events:","        events_data.append({","            'id': event.id,","            'title': event.title,","            'start': event.start_time.isoformat(),","            'end': event.end_time.isoformat(),","        })","    return JsonResponse(events_data, safe=False)","","@csrf_exempt","def add_event(request):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            title = data.get('title')","            start_time = parse_datetime(data.get('start'))","            end_time = parse_datetime(data.get('end'))","","            if title and start_time and end_time:","                event = Event.objects.create(title=title, start_time=start_time, end_time=end_time)","                return JsonResponse({'status': 'success', 'event_id': event.id}, status=200)","            else:","                return JsonResponse({'error': 'Invalid data'}, status=400)","        except json.JSONDecodeError:","            return JsonResponse({'error': 'Invalid JSON data'}, status=400)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            event = get_object_or_404(Event, id=event_id)","            event.title = data.get('title', event.title)","            event.start_time = parse_datetime(data.get('start', event.start_time.isoformat()))","            event.end_time = parse_datetime(data.get('end', event.end_time.isoformat()))","            event.save()","            return JsonResponse({'status': 'success'}, status=200)","        except json.JSONDecodeError:","            return JsonResponse({'error': 'Invalid JSON data'}, status=400)","        except Event.DoesNotExist:","            return JsonResponse({'error': 'Event not found'}, status=404)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def delete_event(request, event_id):","    if request.method == 'POST':","        event = get_object_or_404(Event, id=event_id)","        event.delete()","        return JsonResponse({'status': 'success'}, status=200)","    return JsonResponse({'error': 'Invalid request method'}, status=400)",""],"id":77},{"start":{"row":0,"column":0},"end":{"row":53,"column":0},"action":"insert","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","import json","from .models import Event","from django.utils.dateparse import parse_datetime","","# View to render the calendar page","def court_schedule_view(request):","    return render(request, 'court_schedule.html')","","# View to fetch events in JSON format for FullCalendar","def court_schedule_events(request):","    events = Event.objects.all()","    event_list = [","        {'id': event.id, 'title': event.title, 'start': event.start_time.isoformat(), 'end': event.end_time.isoformat()}","        for event in events","    ]","    return JsonResponse(event_list, safe=False)","","# Add new event","@csrf_exempt","def add_event(request):","    if request.method == 'POST':","        data = json.loads(request.body)","        title = data.get('title')","        start_time = parse_datetime(data.get('start'))","        end_time = parse_datetime(data.get('end'))","","        if title and start_time and end_time:","            event = Event.objects.create(title=title, start_time=start_time, end_time=end_time)","            return JsonResponse({'status': 'success', 'event_id': event.id}, status=200)","        return JsonResponse({'error': 'Invalid data'}, status=400)","","# Edit existing event","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        event = get_object_or_404(Event, id=event_id)","        data = json.loads(request.body)","        event.title = data.get('title', event.title)","        event.start_time = parse_datetime(data.get('start', event.start_time.isoformat()))","        event.end_time = parse_datetime(data.get('end', event.end_time.isoformat()))","        event.save()","        return JsonResponse({'status': 'success'}, status=200)","","# Delete an event","@csrf_exempt","def delete_event(request, event_id):","    if request.method == 'POST':","        event = get_object_or_404(Event, id=event_id)","        event.delete()","        return JsonResponse({'status': 'success'}, status=200)",""]}],[{"start":{"row":11,"column":0},"end":{"row":19,"column":0},"action":"remove","lines":["# View to fetch events in JSON format for FullCalendar","def court_schedule_events(request):","    events = Event.objects.all()","    event_list = [","        {'id': event.id, 'title': event.title, 'start': event.start_time.isoformat(), 'end': event.end_time.isoformat()}","        for event in events","    ]","    return JsonResponse(event_list, safe=False)",""],"id":78},{"start":{"row":11,"column":0},"end":{"row":24,"column":0},"action":"insert","lines":["from django.http import JsonResponse","from .models import Event","","def court_schedule_events(request):","    events = Event.objects.all()  # Query all events from the database","    events_list = [{","        'id': event.id,","        'title': event.title,","        'start': event.start_time.isoformat(),","        'end': event.end_time.isoformat(),","    } for event in events]","    ","    return JsonResponse(events_list, safe=False)",""]}],[{"start":{"row":11,"column":0},"end":{"row":12,"column":25},"action":"remove","lines":["from django.http import JsonResponse","from .models import Event"],"id":79},{"start":{"row":10,"column":0},"end":{"row":11,"column":0},"action":"remove","lines":["",""]},{"start":{"row":9,"column":49},"end":{"row":10,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":0,"column":0},"end":{"row":55,"column":0},"action":"remove","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","import json","from .models import Event","from django.utils.dateparse import parse_datetime","","# View to render the calendar page","def court_schedule_view(request):","    return render(request, 'court_schedule.html')","","def court_schedule_events(request):","    events = Event.objects.all()  # Query all events from the database","    events_list = [{","        'id': event.id,","        'title': event.title,","        'start': event.start_time.isoformat(),","        'end': event.end_time.isoformat(),","    } for event in events]","    ","    return JsonResponse(events_list, safe=False)","","# Add new event","@csrf_exempt","def add_event(request):","    if request.method == 'POST':","        data = json.loads(request.body)","        title = data.get('title')","        start_time = parse_datetime(data.get('start'))","        end_time = parse_datetime(data.get('end'))","","        if title and start_time and end_time:","            event = Event.objects.create(title=title, start_time=start_time, end_time=end_time)","            return JsonResponse({'status': 'success', 'event_id': event.id}, status=200)","        return JsonResponse({'error': 'Invalid data'}, status=400)","","# Edit existing event","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        event = get_object_or_404(Event, id=event_id)","        data = json.loads(request.body)","        event.title = data.get('title', event.title)","        event.start_time = parse_datetime(data.get('start', event.start_time.isoformat()))","        event.end_time = parse_datetime(data.get('end', event.end_time.isoformat()))","        event.save()","        return JsonResponse({'status': 'success'}, status=200)","","# Delete an event","@csrf_exempt","def delete_event(request, event_id):","    if request.method == 'POST':","        event = get_object_or_404(Event, id=event_id)","        event.delete()","        return JsonResponse({'status': 'success'}, status=200)",""],"id":80},{"start":{"row":0,"column":0},"end":{"row":61,"column":0},"action":"insert","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","from .models import Event","from django.utils.dateparse import parse_datetime","import json","","# View to render the event schedule page","def court_schedule_view(request):","    return render(request, 'court_schedule.html')","","# View to fetch events in JSON format for FullCalendar","def court_schedule_events(request):","    events = Event.objects.all()","    events_list = [","        {","            'id': event.id,","            'title': event.title,","            'start': event.start_time.isoformat(),","            'end': event.end_time.isoformat(),","        }","        for event in events","    ]","    return JsonResponse(events_list, safe=False)","","@csrf_exempt","def add_event(request):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            title = data.get('title')","            start_time = parse_datetime(data.get('start'))","            end_time = parse_datetime(data.get('end'))","","            if title and start_time and end_time:","                event = Event.objects.create(title=title, start_time=start_time, end_time=end_time)","                return JsonResponse({'status': 'success', 'event_id': event.id}, status=200)","            else:","                return JsonResponse({'error': 'Invalid data'}, status=400)","        except json.JSONDecodeError:","            return JsonResponse({'error': 'Invalid JSON data'}, status=400)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        data = json.loads(request.body)","        event = get_object_or_404(Event, id=event_id)","        event.title = data.get('title', event.title)","        event.start_time = parse_datetime(data.get('start', event.start_time.isoformat()))","        event.end_time = parse_datetime(data.get('end', event.end_time.isoformat()))","        event.save()","        return JsonResponse({'status': 'success'}, status=200)","","@csrf_exempt","def delete_event(request, event_id):","    if request.method == 'POST':","        event = get_object_or_404(Event, id=event_id)","        event.delete()","        return JsonResponse({'status': 'success'}, status=200)","    return JsonResponse({'error': 'Invalid request method'}, status=400)",""]}],[{"start":{"row":0,"column":0},"end":{"row":61,"column":0},"action":"remove","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","from .models import Event","from django.utils.dateparse import parse_datetime","import json","","# View to render the event schedule page","def court_schedule_view(request):","    return render(request, 'court_schedule.html')","","# View to fetch events in JSON format for FullCalendar","def court_schedule_events(request):","    events = Event.objects.all()","    events_list = [","        {","            'id': event.id,","            'title': event.title,","            'start': event.start_time.isoformat(),","            'end': event.end_time.isoformat(),","        }","        for event in events","    ]","    return JsonResponse(events_list, safe=False)","","@csrf_exempt","def add_event(request):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            title = data.get('title')","            start_time = parse_datetime(data.get('start'))","            end_time = parse_datetime(data.get('end'))","","            if title and start_time and end_time:","                event = Event.objects.create(title=title, start_time=start_time, end_time=end_time)","                return JsonResponse({'status': 'success', 'event_id': event.id}, status=200)","            else:","                return JsonResponse({'error': 'Invalid data'}, status=400)","        except json.JSONDecodeError:","            return JsonResponse({'error': 'Invalid JSON data'}, status=400)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        data = json.loads(request.body)","        event = get_object_or_404(Event, id=event_id)","        event.title = data.get('title', event.title)","        event.start_time = parse_datetime(data.get('start', event.start_time.isoformat()))","        event.end_time = parse_datetime(data.get('end', event.end_time.isoformat()))","        event.save()","        return JsonResponse({'status': 'success'}, status=200)","","@csrf_exempt","def delete_event(request, event_id):","    if request.method == 'POST':","        event = get_object_or_404(Event, id=event_id)","        event.delete()","        return JsonResponse({'status': 'success'}, status=200)","    return JsonResponse({'error': 'Invalid request method'}, status=400)",""],"id":81},{"start":{"row":0,"column":0},"end":{"row":50,"column":0},"action":"insert","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","import json","from django.utils.dateparse import parse_datetime","from .models import Event","","def court_schedule_view(request):","    return render(request, 'court_schedule.html')","","def court_schedule_events(request):","    events = list(Event.objects.values('id', 'title', 'start_time', 'end_time'))","    for event in events:","        event['start'] = event.pop('start_time')","        event['end'] = event.pop('end_time')","    return JsonResponse(events, safe=False)","","@csrf_exempt","def add_event(request):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            title = data.get('title')","            start_time = parse_datetime(data.get('start'))","            end_time = parse_datetime(data.get('end'))","            event = Event.objects.create(title=title, start_time=start_time, end_time=end_time)","            return JsonResponse({'status': 'success', 'event_id': event.id}, status=200)","        except json.JSONDecodeError:","            return JsonResponse({'error': 'Invalid JSON data'}, status=400)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        data = json.loads(request.body)","        event = get_object_or_404(Event, id=event_id)","        event.title = data.get('title', event.title)","        event.start_time = parse_datetime(data.get('start', event.start_time.isoformat()))","        event.end_time = parse_datetime(data.get('end', event.end_time.isoformat()))","        event.save()","        return JsonResponse({'status': 'success'}, status=200)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def delete_event(request, event_id):","    if request.method == 'POST':","        event = get_object_or_404(Event, id=event_id)","        event.delete()","        return JsonResponse({'status': 'success'}, status=200)","    return JsonResponse({'error': 'Invalid request method'}, status=400)",""]}],[{"start":{"row":49,"column":72},"end":{"row":50,"column":0},"action":"remove","lines":["",""],"id":82}],[{"start":{"row":0,"column":0},"end":{"row":49,"column":72},"action":"remove","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","import json","from django.utils.dateparse import parse_datetime","from .models import Event","","def court_schedule_view(request):","    return render(request, 'court_schedule.html')","","def court_schedule_events(request):","    events = list(Event.objects.values('id', 'title', 'start_time', 'end_time'))","    for event in events:","        event['start'] = event.pop('start_time')","        event['end'] = event.pop('end_time')","    return JsonResponse(events, safe=False)","","@csrf_exempt","def add_event(request):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            title = data.get('title')","            start_time = parse_datetime(data.get('start'))","            end_time = parse_datetime(data.get('end'))","            event = Event.objects.create(title=title, start_time=start_time, end_time=end_time)","            return JsonResponse({'status': 'success', 'event_id': event.id}, status=200)","        except json.JSONDecodeError:","            return JsonResponse({'error': 'Invalid JSON data'}, status=400)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        data = json.loads(request.body)","        event = get_object_or_404(Event, id=event_id)","        event.title = data.get('title', event.title)","        event.start_time = parse_datetime(data.get('start', event.start_time.isoformat()))","        event.end_time = parse_datetime(data.get('end', event.end_time.isoformat()))","        event.save()","        return JsonResponse({'status': 'success'}, status=200)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def delete_event(request, event_id):","    if request.method == 'POST':","        event = get_object_or_404(Event, id=event_id)","        event.delete()","        return JsonResponse({'status': 'success'}, status=200)","    return JsonResponse({'error': 'Invalid request method'}, status=400)"],"id":83},{"start":{"row":0,"column":0},"end":{"row":50,"column":0},"action":"insert","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","import json","from django.utils.dateparse import parse_datetime","from .models import Event","","def court_schedule_view(request):","    return render(request, 'court_schedule.html')","","def court_schedule_events(request):","    events = list(Event.objects.values('id', 'title', 'start_time', 'end_time'))","    for event in events:","        event['start'] = event.pop('start_time')","        event['end'] = event.pop('end_time')","    return JsonResponse(events, safe=False)","","@csrf_exempt","def add_event(request):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            title = data.get('title')","            start_time = parse_datetime(data.get('start'))","            end_time = parse_datetime(data.get('end'))","            event = Event.objects.create(title=title, start_time=start_time, end_time=end_time)","            return JsonResponse({'status': 'success', 'event_id': event.id}, status=200)","        except json.JSONDecodeError:","            return JsonResponse({'error': 'Invalid JSON data'}, status=400)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        data = json.loads(request.body)","        event = get_object_or_404(Event, id=event_id)","        event.title = data.get('title', event.title)","        event.start_time = parse_datetime(data.get('start', event.start_time.isoformat()))","        event.end_time = parse_datetime(data.get('end', event.end_time.isoformat()))","        event.save()","        return JsonResponse({'status': 'success'}, status=200)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def delete_event(request, event_id):","    if request.method == 'POST':","        event = get_object_or_404(Event, id=event_id)","        event.delete()","        return JsonResponse({'status': 'success'}, status=200)","    return JsonResponse({'error': 'Invalid request method'}, status=400)",""]}],[{"start":{"row":0,"column":0},"end":{"row":50,"column":0},"action":"remove","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","import json","from django.utils.dateparse import parse_datetime","from .models import Event","","def court_schedule_view(request):","    return render(request, 'court_schedule.html')","","def court_schedule_events(request):","    events = list(Event.objects.values('id', 'title', 'start_time', 'end_time'))","    for event in events:","        event['start'] = event.pop('start_time')","        event['end'] = event.pop('end_time')","    return JsonResponse(events, safe=False)","","@csrf_exempt","def add_event(request):","    if request.method == 'POST':","        try:","            data = json.loads(request.body)","            title = data.get('title')","            start_time = parse_datetime(data.get('start'))","            end_time = parse_datetime(data.get('end'))","            event = Event.objects.create(title=title, start_time=start_time, end_time=end_time)","            return JsonResponse({'status': 'success', 'event_id': event.id}, status=200)","        except json.JSONDecodeError:","            return JsonResponse({'error': 'Invalid JSON data'}, status=400)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        data = json.loads(request.body)","        event = get_object_or_404(Event, id=event_id)","        event.title = data.get('title', event.title)","        event.start_time = parse_datetime(data.get('start', event.start_time.isoformat()))","        event.end_time = parse_datetime(data.get('end', event.end_time.isoformat()))","        event.save()","        return JsonResponse({'status': 'success'}, status=200)","    return JsonResponse({'error': 'Invalid request method'}, status=400)","","@csrf_exempt","def delete_event(request, event_id):","    if request.method == 'POST':","        event = get_object_or_404(Event, id=event_id)","        event.delete()","        return JsonResponse({'status': 'success'}, status=200)","    return JsonResponse({'error': 'Invalid request method'}, status=400)",""],"id":84},{"start":{"row":0,"column":0},"end":{"row":49,"column":81},"action":"insert","lines":["from django.shortcuts import render, get_object_or_404","from django.http import JsonResponse","from django.views.decorators.csrf import csrf_exempt","import json","from django.utils.dateparse import parse_datetime","from .models import Event","","def court_schedule_view(request):","    return render(request, 'court_schedule.html')","","def court_schedule_events(request):","    events = list(Event.objects.values('id', 'title', 'start_time', 'end_time'))","    for event in events:","        event['start'] = event['start_time'].isoformat()","        event['end'] = event['end_time'].isoformat()","        del event['start_time']","        del event['end_time']","    return JsonResponse(events, safe=False)","","@csrf_exempt","def add_event(request):","    if request.method == 'POST':","        data = json.loads(request.body)","        event = Event.objects.create(","            title=data['title'],","            start_time=parse_datetime(data['start']),","            end_time=parse_datetime(data['end'])","        )","        return JsonResponse({'status': 'success', 'id': event.id})","    return JsonResponse({'status': 'error', 'message': 'Invalid request method'})","","@csrf_exempt","def edit_event(request, event_id):","    if request.method == 'POST':","        event = get_object_or_404(Event, id=event_id)","        data = json.loads(request.body)","        event.title = data['title']","        event.start_time = parse_datetime(data['start'])","        event.end_time = parse_datetime(data['end'])","        event.save()","        return JsonResponse({'status': 'success'})","    return JsonResponse({'status': 'error', 'message': 'Invalid request method'})","","@csrf_exempt","def delete_event(request, event_id):","    if request.method == 'POST':","        event = get_object_or_404(Event, id=event_id)","        event.delete()","        return JsonResponse({'status': 'success'})","    return JsonResponse({'status': 'error', 'message': 'Invalid request method'})"]}]]},"ace":{"folds":[],"scrolltop":418,"scrollleft":0,"selection":{"start":{"row":30,"column":0},"end":{"row":30,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1726121835602,"hash":"87bcb1ac0e91c2f191656c1481e47ab446831960"}